/* soapBFCPServiceProxy.h
   Generated by gSOAP 2.8.21 from server.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapBFCPServiceProxy_H
#define soapBFCPServiceProxy_H
#include "soapH.h"

class SOAP_CMAC BFCPServiceProxy : public soap
{ public:
	/// Endpoint URL of service 'BFCPServiceProxy' (change as needed)
	const char *soap_endpoint;
	/// Variables globally declared in server.h (non-static)
	/// Constructor
	BFCPServiceProxy();
	/// Construct from another engine state
	BFCPServiceProxy(const struct soap&);
	/// Constructor with endpoint URL
	BFCPServiceProxy(const char *url);
	/// Constructor with engine input+output mode control
	BFCPServiceProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	BFCPServiceProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	BFCPServiceProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~BFCPServiceProxy();
	/// Initializer used by constructors
	virtual	void BFCPServiceProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'start' (returns error code or SOAP_OK)
	virtual	int start(enum ns__AddrFamily af, unsigned short port, bool enbaleConnectionThread, int workThreadNum, double userObsoletedTime, enum ns__ErrorCode *errorCode) { return this->start(NULL, NULL, af, port, enbaleConnectionThread, workThreadNum, userObsoletedTime, errorCode); }
	virtual	int start(const char *endpoint, const char *soap_action, enum ns__AddrFamily af, unsigned short port, bool enbaleConnectionThread, int workThreadNum, double userObsoletedTime, enum ns__ErrorCode *errorCode);

	/// Web service operation 'stop' (returns error code or SOAP_OK)
	virtual	int stop(enum ns__ErrorCode *errorCode) { return this->stop(NULL, NULL, errorCode); }
	virtual	int stop(const char *endpoint, const char *soap_action, enum ns__ErrorCode *errorCode);

	/// Web service one-way send operation 'send_quit' (returns error code or SOAP_OK)
	virtual	int send_quit() { return this->send_quit(NULL, NULL); }
	virtual	int send_quit(const char *endpoint, const char *soap_action);
	/// Web service one-way receive operation 'recv_quit' (returns error code or SOAP_OK);
	virtual	int recv_quit(struct ns__quit&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_quit' (returns error code or SOAP_OK)
	virtual	int recv_quit_empty_response() { return soap_recv_empty_response(this); }
	/// Web service one-way synchronous send operation 'quit' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int quit() { return this->quit(NULL, NULL); }
	virtual	int quit(const char *endpoint, const char *soap_action) { if (this->send_quit(endpoint, soap_action) || soap_recv_empty_response(this)) return this->error; return SOAP_OK; }

	/// Web service operation 'addConference' (returns error code or SOAP_OK)
	virtual	int addConference(unsigned int conferenceID, unsigned short maxFloorRequest, enum ns__Policy policy, double timeForChairAction, enum ns__ErrorCode *errorCode) { return this->addConference(NULL, NULL, conferenceID, maxFloorRequest, policy, timeForChairAction, errorCode); }
	virtual	int addConference(const char *endpoint, const char *soap_action, unsigned int conferenceID, unsigned short maxFloorRequest, enum ns__Policy policy, double timeForChairAction, enum ns__ErrorCode *errorCode);

	/// Web service operation 'removeConference' (returns error code or SOAP_OK)
	virtual	int removeConference(unsigned int conferenceID, enum ns__ErrorCode *errorCode) { return this->removeConference(NULL, NULL, conferenceID, errorCode); }
	virtual	int removeConference(const char *endpoint, const char *soap_action, unsigned int conferenceID, enum ns__ErrorCode *errorCode);

	/// Web service operation 'modifyConference' (returns error code or SOAP_OK)
	virtual	int modifyConference(unsigned int conferenceID, unsigned short maxFloorRequest, enum ns__Policy policy, double timeForChairAction, enum ns__ErrorCode *errorCode) { return this->modifyConference(NULL, NULL, conferenceID, maxFloorRequest, policy, timeForChairAction, errorCode); }
	virtual	int modifyConference(const char *endpoint, const char *soap_action, unsigned int conferenceID, unsigned short maxFloorRequest, enum ns__Policy policy, double timeForChairAction, enum ns__ErrorCode *errorCode);

	/// Web service operation 'addFloor' (returns error code or SOAP_OK)
	virtual	int addFloor(unsigned int conferenceID, unsigned short floorID, unsigned short maxGrantedNum, double maxHoldingTime, enum ns__ErrorCode *errorCode) { return this->addFloor(NULL, NULL, conferenceID, floorID, maxGrantedNum, maxHoldingTime, errorCode); }
	virtual	int addFloor(const char *endpoint, const char *soap_action, unsigned int conferenceID, unsigned short floorID, unsigned short maxGrantedNum, double maxHoldingTime, enum ns__ErrorCode *errorCode);

	/// Web service operation 'removeFloor' (returns error code or SOAP_OK)
	virtual	int removeFloor(unsigned int conferenceID, unsigned short floorID, enum ns__ErrorCode *errorCode) { return this->removeFloor(NULL, NULL, conferenceID, floorID, errorCode); }
	virtual	int removeFloor(const char *endpoint, const char *soap_action, unsigned int conferenceID, unsigned short floorID, enum ns__ErrorCode *errorCode);

	/// Web service operation 'modifyFloor' (returns error code or SOAP_OK)
	virtual	int modifyFloor(unsigned int conferenceID, unsigned short floorID, unsigned short maxGrantedNum, double maxHoldingTime, enum ns__ErrorCode *errorCode) { return this->modifyFloor(NULL, NULL, conferenceID, floorID, maxGrantedNum, maxHoldingTime, errorCode); }
	virtual	int modifyFloor(const char *endpoint, const char *soap_action, unsigned int conferenceID, unsigned short floorID, unsigned short maxGrantedNum, double maxHoldingTime, enum ns__ErrorCode *errorCode);

	/// Web service operation 'addUser' (returns error code or SOAP_OK)
	virtual	int addUser(unsigned int conferenceID, unsigned short userID, std::string userName, std::string userURI, enum ns__ErrorCode *errorCode) { return this->addUser(NULL, NULL, conferenceID, userID, userName, userURI, errorCode); }
	virtual	int addUser(const char *endpoint, const char *soap_action, unsigned int conferenceID, unsigned short userID, std::string userName, std::string userURI, enum ns__ErrorCode *errorCode);

	/// Web service operation 'removeUser' (returns error code or SOAP_OK)
	virtual	int removeUser(unsigned int conferenceID, unsigned short userID, enum ns__ErrorCode *errorCode) { return this->removeUser(NULL, NULL, conferenceID, userID, errorCode); }
	virtual	int removeUser(const char *endpoint, const char *soap_action, unsigned int conferenceID, unsigned short userID, enum ns__ErrorCode *errorCode);

	/// Web service operation 'setChair' (returns error code or SOAP_OK)
	virtual	int setChair(unsigned int conferenceID, unsigned short floorID, unsigned short userID, enum ns__ErrorCode *errorCode) { return this->setChair(NULL, NULL, conferenceID, floorID, userID, errorCode); }
	virtual	int setChair(const char *endpoint, const char *soap_action, unsigned int conferenceID, unsigned short floorID, unsigned short userID, enum ns__ErrorCode *errorCode);

	/// Web service operation 'removeChair' (returns error code or SOAP_OK)
	virtual	int removeChair(unsigned int conferenceID, unsigned short floorID, enum ns__ErrorCode *errorCode) { return this->removeChair(NULL, NULL, conferenceID, floorID, errorCode); }
	virtual	int removeChair(const char *endpoint, const char *soap_action, unsigned int conferenceID, unsigned short floorID, enum ns__ErrorCode *errorCode);

	/// Web service operation 'getConferenceIDs' (returns error code or SOAP_OK)
	virtual	int getConferenceIDs(ns__ConferenceListResult *result) { return this->getConferenceIDs(NULL, NULL, result); }
	virtual	int getConferenceIDs(const char *endpoint, const char *soap_action, ns__ConferenceListResult *result);

	/// Web service operation 'getConferenceInfo' (returns error code or SOAP_OK)
	virtual	int getConferenceInfo(unsigned int conferenceID, ns__ConferenceInfoResult *result) { return this->getConferenceInfo(NULL, NULL, conferenceID, result); }
	virtual	int getConferenceInfo(const char *endpoint, const char *soap_action, unsigned int conferenceID, ns__ConferenceInfoResult *result);
};
#endif

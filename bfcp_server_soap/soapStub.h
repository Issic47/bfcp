/* soapStub.h
   Generated by gSOAP 2.8.21 from server.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#include "stdsoap2.h"
#if GSOAP_VERSION != 20821
# error "GSOAP VERSION 20821 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ns__ErrorCode
#define SOAP_TYPE_ns__ErrorCode (10)
/* ns:ErrorCode */
enum ns__ErrorCode { kNoError = 0, kUserNotExist = 1, kUserAlreadyExist = 2, kFloorNotExist = 3, kFloorAlreadyExist = 4, kChairNotExost = 5, kChairAlreadyExist = 6, kConferenceNotExist = 7, kConferenceAlreadyExist = 8, kServerNotStart = 9, kServerAlreadyStart = 10 };
#endif

#ifndef SOAP_TYPE_ns__Policy
#define SOAP_TYPE_ns__Policy (11)
/* ns:Policy */
enum ns__Policy { kAutoAccept = 0, kAutoDeny = 1 };
#endif

#ifndef SOAP_TYPE_ns__AddrFamily
#define SOAP_TYPE_ns__AddrFamily (12)
/* ns:AddrFamily */
enum ns__AddrFamily { kIPv4 = 0, kIPv6 = 1 };
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns__ConferenceListResult
#define SOAP_TYPE_ns__ConferenceListResult (13)
/* ns:ConferenceListResult */
class SOAP_CMAC ns__ConferenceListResult
{
public:
	enum ns__ErrorCode errorCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:ErrorCode */
	std::vector<unsigned int >conferenceIDs;	/* optional element of type xsd:unsignedInt */
public:
	virtual int soap_type() const { return 13; } /* = unique type id SOAP_TYPE_ns__ConferenceListResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__ConferenceListResult() { ns__ConferenceListResult::soap_default(NULL); }
	virtual ~ns__ConferenceListResult() { }
};
#endif

#ifndef SOAP_TYPE_ns__ConferenceInfoResult
#define SOAP_TYPE_ns__ConferenceInfoResult (16)
/* ns:ConferenceInfoResult */
class SOAP_CMAC ns__ConferenceInfoResult
{
public:
	enum ns__ErrorCode errorCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns:ErrorCode */
	std::string conferenceInfo;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 16; } /* = unique type id SOAP_TYPE_ns__ConferenceInfoResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns__ConferenceInfoResult() { ns__ConferenceInfoResult::soap_default(NULL); }
	virtual ~ns__ConferenceInfoResult() { }
};
#endif

#ifndef SOAP_TYPE_ns__startResponse
#define SOAP_TYPE_ns__startResponse (23)
/* ns:startResponse */
struct ns__startResponse
{
public:
	enum ns__ErrorCode *errorCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns:ErrorCode */
public:
	int soap_type() const { return 23; } /* = unique type id SOAP_TYPE_ns__startResponse */
};
#endif

#ifndef SOAP_TYPE_ns__start
#define SOAP_TYPE_ns__start (24)
/* ns:start */
struct ns__start
{
public:
	enum ns__AddrFamily af;	/* required element of type ns:AddrFamily */
	unsigned short port;	/* required element of type xsd:unsignedShort */
	bool enbaleConnectionThread;	/* required element of type xsd:boolean */
	int workThreadNum;	/* required element of type xsd:int */
	double userObsoletedTime;	/* required element of type xsd:double */
public:
	int soap_type() const { return 24; } /* = unique type id SOAP_TYPE_ns__start */
};
#endif

#ifndef SOAP_TYPE_ns__stopResponse
#define SOAP_TYPE_ns__stopResponse (26)
/* ns:stopResponse */
struct ns__stopResponse
{
public:
	enum ns__ErrorCode *errorCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns:ErrorCode */
public:
	int soap_type() const { return 26; } /* = unique type id SOAP_TYPE_ns__stopResponse */
};
#endif

#ifndef SOAP_TYPE_ns__stop
#define SOAP_TYPE_ns__stop (27)
/* ns:stop */
struct ns__stop
{
public:
	int soap_type() const { return 27; } /* = unique type id SOAP_TYPE_ns__stop */
};
#endif

#ifndef SOAP_TYPE_ns__quit
#define SOAP_TYPE_ns__quit (30)
/* ns:quit */
struct ns__quit
{
public:
	int soap_type() const { return 30; } /* = unique type id SOAP_TYPE_ns__quit */
};
#endif

#ifndef SOAP_TYPE_ns__addConferenceResponse
#define SOAP_TYPE_ns__addConferenceResponse (32)
/* ns:addConferenceResponse */
struct ns__addConferenceResponse
{
public:
	enum ns__ErrorCode *errorCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns:ErrorCode */
public:
	int soap_type() const { return 32; } /* = unique type id SOAP_TYPE_ns__addConferenceResponse */
};
#endif

#ifndef SOAP_TYPE_ns__addConference
#define SOAP_TYPE_ns__addConference (33)
/* ns:addConference */
struct ns__addConference
{
public:
	unsigned int conferenceID;	/* required element of type xsd:unsignedInt */
	unsigned short maxFloorRequest;	/* required element of type xsd:unsignedShort */
	enum ns__Policy policy;	/* required element of type ns:Policy */
	double timeForChairAction;	/* required element of type xsd:double */
public:
	int soap_type() const { return 33; } /* = unique type id SOAP_TYPE_ns__addConference */
};
#endif

#ifndef SOAP_TYPE_ns__removeConferenceResponse
#define SOAP_TYPE_ns__removeConferenceResponse (35)
/* ns:removeConferenceResponse */
struct ns__removeConferenceResponse
{
public:
	enum ns__ErrorCode *errorCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns:ErrorCode */
public:
	int soap_type() const { return 35; } /* = unique type id SOAP_TYPE_ns__removeConferenceResponse */
};
#endif

#ifndef SOAP_TYPE_ns__removeConference
#define SOAP_TYPE_ns__removeConference (36)
/* ns:removeConference */
struct ns__removeConference
{
public:
	unsigned int conferenceID;	/* required element of type xsd:unsignedInt */
public:
	int soap_type() const { return 36; } /* = unique type id SOAP_TYPE_ns__removeConference */
};
#endif

#ifndef SOAP_TYPE_ns__modifyConferenceResponse
#define SOAP_TYPE_ns__modifyConferenceResponse (38)
/* ns:modifyConferenceResponse */
struct ns__modifyConferenceResponse
{
public:
	enum ns__ErrorCode *errorCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns:ErrorCode */
public:
	int soap_type() const { return 38; } /* = unique type id SOAP_TYPE_ns__modifyConferenceResponse */
};
#endif

#ifndef SOAP_TYPE_ns__modifyConference
#define SOAP_TYPE_ns__modifyConference (39)
/* ns:modifyConference */
struct ns__modifyConference
{
public:
	unsigned int conferenceID;	/* required element of type xsd:unsignedInt */
	unsigned short maxFloorRequest;	/* required element of type xsd:unsignedShort */
	enum ns__Policy policy;	/* required element of type ns:Policy */
	double timeForChairAction;	/* required element of type xsd:double */
public:
	int soap_type() const { return 39; } /* = unique type id SOAP_TYPE_ns__modifyConference */
};
#endif

#ifndef SOAP_TYPE_ns__addFloorResponse
#define SOAP_TYPE_ns__addFloorResponse (41)
/* ns:addFloorResponse */
struct ns__addFloorResponse
{
public:
	enum ns__ErrorCode *errorCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns:ErrorCode */
public:
	int soap_type() const { return 41; } /* = unique type id SOAP_TYPE_ns__addFloorResponse */
};
#endif

#ifndef SOAP_TYPE_ns__addFloor
#define SOAP_TYPE_ns__addFloor (42)
/* ns:addFloor */
struct ns__addFloor
{
public:
	unsigned int conferenceID;	/* required element of type xsd:unsignedInt */
	unsigned short floorID;	/* required element of type xsd:unsignedShort */
	unsigned short maxGrantedNum;	/* required element of type xsd:unsignedShort */
	double maxHoldingTime;	/* required element of type xsd:double */
public:
	int soap_type() const { return 42; } /* = unique type id SOAP_TYPE_ns__addFloor */
};
#endif

#ifndef SOAP_TYPE_ns__removeFloorResponse
#define SOAP_TYPE_ns__removeFloorResponse (44)
/* ns:removeFloorResponse */
struct ns__removeFloorResponse
{
public:
	enum ns__ErrorCode *errorCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns:ErrorCode */
public:
	int soap_type() const { return 44; } /* = unique type id SOAP_TYPE_ns__removeFloorResponse */
};
#endif

#ifndef SOAP_TYPE_ns__removeFloor
#define SOAP_TYPE_ns__removeFloor (45)
/* ns:removeFloor */
struct ns__removeFloor
{
public:
	unsigned int conferenceID;	/* required element of type xsd:unsignedInt */
	unsigned short floorID;	/* required element of type xsd:unsignedShort */
public:
	int soap_type() const { return 45; } /* = unique type id SOAP_TYPE_ns__removeFloor */
};
#endif

#ifndef SOAP_TYPE_ns__modifyFloorResponse
#define SOAP_TYPE_ns__modifyFloorResponse (47)
/* ns:modifyFloorResponse */
struct ns__modifyFloorResponse
{
public:
	enum ns__ErrorCode *errorCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns:ErrorCode */
public:
	int soap_type() const { return 47; } /* = unique type id SOAP_TYPE_ns__modifyFloorResponse */
};
#endif

#ifndef SOAP_TYPE_ns__modifyFloor
#define SOAP_TYPE_ns__modifyFloor (48)
/* ns:modifyFloor */
struct ns__modifyFloor
{
public:
	unsigned int conferenceID;	/* required element of type xsd:unsignedInt */
	unsigned short floorID;	/* required element of type xsd:unsignedShort */
	unsigned short maxGrantedNum;	/* required element of type xsd:unsignedShort */
	double maxHoldingTime;	/* required element of type xsd:double */
public:
	int soap_type() const { return 48; } /* = unique type id SOAP_TYPE_ns__modifyFloor */
};
#endif

#ifndef SOAP_TYPE_ns__addUserResponse
#define SOAP_TYPE_ns__addUserResponse (50)
/* ns:addUserResponse */
struct ns__addUserResponse
{
public:
	enum ns__ErrorCode *errorCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns:ErrorCode */
public:
	int soap_type() const { return 50; } /* = unique type id SOAP_TYPE_ns__addUserResponse */
};
#endif

#ifndef SOAP_TYPE_ns__addUser
#define SOAP_TYPE_ns__addUser (51)
/* ns:addUser */
struct ns__addUser
{
public:
	unsigned int conferenceID;	/* required element of type xsd:unsignedInt */
	unsigned short userID;	/* required element of type xsd:unsignedShort */
	std::string userName;	/* required element of type xsd:string */
	std::string userURI;	/* required element of type xsd:string */
public:
	int soap_type() const { return 51; } /* = unique type id SOAP_TYPE_ns__addUser */
};
#endif

#ifndef SOAP_TYPE_ns__removeUserResponse
#define SOAP_TYPE_ns__removeUserResponse (53)
/* ns:removeUserResponse */
struct ns__removeUserResponse
{
public:
	enum ns__ErrorCode *errorCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns:ErrorCode */
public:
	int soap_type() const { return 53; } /* = unique type id SOAP_TYPE_ns__removeUserResponse */
};
#endif

#ifndef SOAP_TYPE_ns__removeUser
#define SOAP_TYPE_ns__removeUser (54)
/* ns:removeUser */
struct ns__removeUser
{
public:
	unsigned int conferenceID;	/* required element of type xsd:unsignedInt */
	unsigned short userID;	/* required element of type xsd:unsignedShort */
public:
	int soap_type() const { return 54; } /* = unique type id SOAP_TYPE_ns__removeUser */
};
#endif

#ifndef SOAP_TYPE_ns__setChairResponse
#define SOAP_TYPE_ns__setChairResponse (56)
/* ns:setChairResponse */
struct ns__setChairResponse
{
public:
	enum ns__ErrorCode *errorCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns:ErrorCode */
public:
	int soap_type() const { return 56; } /* = unique type id SOAP_TYPE_ns__setChairResponse */
};
#endif

#ifndef SOAP_TYPE_ns__setChair
#define SOAP_TYPE_ns__setChair (57)
/* ns:setChair */
struct ns__setChair
{
public:
	unsigned int conferenceID;	/* required element of type xsd:unsignedInt */
	unsigned short floorID;	/* required element of type xsd:unsignedShort */
	unsigned short userID;	/* required element of type xsd:unsignedShort */
public:
	int soap_type() const { return 57; } /* = unique type id SOAP_TYPE_ns__setChair */
};
#endif

#ifndef SOAP_TYPE_ns__removeChairResponse
#define SOAP_TYPE_ns__removeChairResponse (59)
/* ns:removeChairResponse */
struct ns__removeChairResponse
{
public:
	enum ns__ErrorCode *errorCode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns:ErrorCode */
public:
	int soap_type() const { return 59; } /* = unique type id SOAP_TYPE_ns__removeChairResponse */
};
#endif

#ifndef SOAP_TYPE_ns__removeChair
#define SOAP_TYPE_ns__removeChair (60)
/* ns:removeChair */
struct ns__removeChair
{
public:
	unsigned int conferenceID;	/* required element of type xsd:unsignedInt */
	unsigned short floorID;	/* required element of type xsd:unsignedShort */
public:
	int soap_type() const { return 60; } /* = unique type id SOAP_TYPE_ns__removeChair */
};
#endif

#ifndef SOAP_TYPE_ns__getConferenceIDs
#define SOAP_TYPE_ns__getConferenceIDs (63)
/* ns:getConferenceIDs */
struct ns__getConferenceIDs
{
public:
	int soap_type() const { return 63; } /* = unique type id SOAP_TYPE_ns__getConferenceIDs */
};
#endif

#ifndef SOAP_TYPE_ns__getConferenceInfo
#define SOAP_TYPE_ns__getConferenceInfo (66)
/* ns:getConferenceInfo */
struct ns__getConferenceInfo
{
public:
	unsigned int conferenceID;	/* required element of type xsd:unsignedInt */
public:
	int soap_type() const { return 66; } /* = unique type id SOAP_TYPE_ns__getConferenceInfo */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (67)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 67; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (68)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 68; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (70)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 70; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (72)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 72; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (73)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 73; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (9)
typedef std::string xsd__string;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */

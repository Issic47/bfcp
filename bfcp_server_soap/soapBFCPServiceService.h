/* soapBFCPServiceService.h
   Generated by gSOAP 2.8.21 from server.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapBFCPServiceService_H
#define soapBFCPServiceService_H

#ifndef WITH_PURE_VIRTUAL
#define WITH_PURE_VIRTUAL
#endif

#include "soapH.h"
class SOAP_CMAC BFCPServiceService : public soap
{ public:
	/// Variables globally declared in server.h (non-static)
	/// Constructor
	BFCPServiceService();
	/// Construct from another engine state
	BFCPServiceService(const struct soap&);
	/// Constructor with engine input+output mode control
	BFCPServiceService(soap_mode iomode);
	/// Constructor with engine input and output mode control
	BFCPServiceService(soap_mode imode, soap_mode omode);
	/// Destructor, also frees all deserialized data
	virtual ~BFCPServiceService();
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to defaults
	virtual	void reset();
	/// Initializer used by constructor
	virtual	void BFCPServiceService_init(soap_mode imode, soap_mode omode);
	/// Create a copy
	virtual	BFCPServiceService *copy() SOAP_PURE_VIRTUAL;
	/// Close connection (normally automatic)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Return sender-related fault to sender
	virtual	int soap_senderfault(const char *string, const char *detailXML);
	/// Return sender-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Return receiver-related fault to sender
	virtual	int soap_receiverfault(const char *string, const char *detailXML);
	/// Return receiver-related fault with SOAP 1.2 subcode to sender
	virtual	int soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML);
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif
	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Run simple single-thread (iterative, non-SSL) service on port until a connection error occurs (returns error code or SOAP_OK), use this->bind_flag = SO_REUSEADDR to rebind for a rerun
	virtual	int run(int port);
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog);
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept();
#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
	/// Then accept SSL handshake, when SSL is used
	virtual	int ssl_accept();
#endif
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve();
	/// Used by serve() to dispatch a request (returns error code or SOAP_OK)
	virtual	int dispatch();

	///
	/// Service operations (you should define these):
	/// Note: compile with -DWITH_PURE_VIRTUAL for pure virtual methods
	///

	/// Web service operation 'start' (returns error code or SOAP_OK)
	virtual	int start(enum ns__AddrFamily af, unsigned short port, bool enbaleConnectionThread, int workThreadNum, double userObsoletedTime, enum ns__ErrorCode *errorCode) SOAP_PURE_VIRTUAL;

	/// Web service operation 'stop' (returns error code or SOAP_OK)
	virtual	int stop(enum ns__ErrorCode *errorCode) SOAP_PURE_VIRTUAL;

	/// Web service one-way operation 'quit' (return error code, SOAP_OK (no response), or send_quit_empty_response())
	virtual	int quit() SOAP_PURE_VIRTUAL;
	virtual	int send_quit_empty_response(int httpcode) { return soap_send_empty_response(this, httpcode); }

	/// Web service operation 'addConference' (returns error code or SOAP_OK)
	virtual	int addConference(unsigned int conferenceID, unsigned short maxFloorRequest, enum ns__Policy policy, double timeForChairAction, enum ns__ErrorCode *errorCode) SOAP_PURE_VIRTUAL;

	/// Web service operation 'removeConference' (returns error code or SOAP_OK)
	virtual	int removeConference(unsigned int conferenceID, enum ns__ErrorCode *errorCode) SOAP_PURE_VIRTUAL;

	/// Web service operation 'modifyConference' (returns error code or SOAP_OK)
	virtual	int modifyConference(unsigned int conferenceID, unsigned short maxFloorRequest, enum ns__Policy policy, double timeForChairAction, enum ns__ErrorCode *errorCode) SOAP_PURE_VIRTUAL;

	/// Web service operation 'addFloor' (returns error code or SOAP_OK)
	virtual	int addFloor(unsigned int conferenceID, unsigned short floorID, unsigned short maxGrantedNum, double maxHoldingTime, enum ns__ErrorCode *errorCode) SOAP_PURE_VIRTUAL;

	/// Web service operation 'removeFloor' (returns error code or SOAP_OK)
	virtual	int removeFloor(unsigned int conferenceID, unsigned short floorID, enum ns__ErrorCode *errorCode) SOAP_PURE_VIRTUAL;

	/// Web service operation 'modifyFloor' (returns error code or SOAP_OK)
	virtual	int modifyFloor(unsigned int conferenceID, unsigned short floorID, unsigned short maxGrantedNum, double maxHoldingTime, enum ns__ErrorCode *errorCode) SOAP_PURE_VIRTUAL;

	/// Web service operation 'addUser' (returns error code or SOAP_OK)
	virtual	int addUser(unsigned int conferenceID, unsigned short userID, std::string userName, std::string userURI, enum ns__ErrorCode *errorCode) SOAP_PURE_VIRTUAL;

	/// Web service operation 'removeUser' (returns error code or SOAP_OK)
	virtual	int removeUser(unsigned int conferenceID, unsigned short userID, enum ns__ErrorCode *errorCode) SOAP_PURE_VIRTUAL;

	/// Web service operation 'setChair' (returns error code or SOAP_OK)
	virtual	int setChair(unsigned int conferenceID, unsigned short floorID, unsigned short userID, enum ns__ErrorCode *errorCode) SOAP_PURE_VIRTUAL;

	/// Web service operation 'removeChair' (returns error code or SOAP_OK)
	virtual	int removeChair(unsigned int conferenceID, unsigned short floorID, enum ns__ErrorCode *errorCode) SOAP_PURE_VIRTUAL;

	/// Web service operation 'getConferenceIDs' (returns error code or SOAP_OK)
	virtual	int getConferenceIDs(ns__ConferenceListResult *result) SOAP_PURE_VIRTUAL;

	/// Web service operation 'getConferenceInfo' (returns error code or SOAP_OK)
	virtual	int getConferenceInfo(unsigned int conferenceID, ns__ConferenceInfoResult *result) SOAP_PURE_VIRTUAL;
};
#endif

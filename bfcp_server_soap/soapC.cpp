/* soapC.cpp
   Generated by gSOAP 2.8.21 from server.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.21 2015-03-15 16:13:22 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_unsignedShort:
		return soap_in_unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns__ConferenceList:
		return soap_in_ns__ConferenceList(soap, NULL, NULL, "ns:ConferenceList");
	case SOAP_TYPE_ns__getConferenceInfo:
		return soap_in_ns__getConferenceInfo(soap, NULL, NULL, "ns:getConferenceInfo");
	case SOAP_TYPE_ns__getConferenceInfoResponse:
		return soap_in_ns__getConferenceInfoResponse(soap, NULL, NULL, "ns:getConferenceInfoResponse");
	case SOAP_TYPE_ns__getConferenceIDs:
		return soap_in_ns__getConferenceIDs(soap, NULL, NULL, "ns:getConferenceIDs");
	case SOAP_TYPE_ns__removeChair:
		return soap_in_ns__removeChair(soap, NULL, NULL, "ns:removeChair");
	case SOAP_TYPE_ns__addChair:
		return soap_in_ns__addChair(soap, NULL, NULL, "ns:addChair");
	case SOAP_TYPE_ns__removeUser:
		return soap_in_ns__removeUser(soap, NULL, NULL, "ns:removeUser");
	case SOAP_TYPE_ns__addUser:
		return soap_in_ns__addUser(soap, NULL, NULL, "ns:addUser");
	case SOAP_TYPE_ns__changeMaxGrantedNum:
		return soap_in_ns__changeMaxGrantedNum(soap, NULL, NULL, "ns:changeMaxGrantedNum");
	case SOAP_TYPE_ns__removeFloor:
		return soap_in_ns__removeFloor(soap, NULL, NULL, "ns:removeFloor");
	case SOAP_TYPE_ns__addFloor:
		return soap_in_ns__addFloor(soap, NULL, NULL, "ns:addFloor");
	case SOAP_TYPE_ns__changeAcceptPolicy:
		return soap_in_ns__changeAcceptPolicy(soap, NULL, NULL, "ns:changeAcceptPolicy");
	case SOAP_TYPE_ns__changeMaxFloorRequest:
		return soap_in_ns__changeMaxFloorRequest(soap, NULL, NULL, "ns:changeMaxFloorRequest");
	case SOAP_TYPE_ns__removeConference:
		return soap_in_ns__removeConference(soap, NULL, NULL, "ns:removeConference");
	case SOAP_TYPE_ns__addConference:
		return soap_in_ns__addConference(soap, NULL, NULL, "ns:addConference");
	case SOAP_TYPE_ns__stop:
		return soap_in_ns__stop(soap, NULL, NULL, "ns:stop");
	case SOAP_TYPE_ns__start:
		return soap_in_ns__start(soap, NULL, NULL, "ns:start");
	case SOAP_TYPE_PointerTons__ConferenceList:
		return soap_in_PointerTons__ConferenceList(soap, NULL, NULL, "ns:ConferenceList");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns:ConferenceList"))
		{	*type = SOAP_TYPE_ns__ConferenceList;
			return soap_in_ns__ConferenceList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_unsignedShort;
			return soap_in_unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getConferenceInfo"))
		{	*type = SOAP_TYPE_ns__getConferenceInfo;
			return soap_in_ns__getConferenceInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getConferenceInfoResponse"))
		{	*type = SOAP_TYPE_ns__getConferenceInfoResponse;
			return soap_in_ns__getConferenceInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:getConferenceIDs"))
		{	*type = SOAP_TYPE_ns__getConferenceIDs;
			return soap_in_ns__getConferenceIDs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:removeChair"))
		{	*type = SOAP_TYPE_ns__removeChair;
			return soap_in_ns__removeChair(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:addChair"))
		{	*type = SOAP_TYPE_ns__addChair;
			return soap_in_ns__addChair(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:removeUser"))
		{	*type = SOAP_TYPE_ns__removeUser;
			return soap_in_ns__removeUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:addUser"))
		{	*type = SOAP_TYPE_ns__addUser;
			return soap_in_ns__addUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:changeMaxGrantedNum"))
		{	*type = SOAP_TYPE_ns__changeMaxGrantedNum;
			return soap_in_ns__changeMaxGrantedNum(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:removeFloor"))
		{	*type = SOAP_TYPE_ns__removeFloor;
			return soap_in_ns__removeFloor(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:addFloor"))
		{	*type = SOAP_TYPE_ns__addFloor;
			return soap_in_ns__addFloor(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:changeAcceptPolicy"))
		{	*type = SOAP_TYPE_ns__changeAcceptPolicy;
			return soap_in_ns__changeAcceptPolicy(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:changeMaxFloorRequest"))
		{	*type = SOAP_TYPE_ns__changeMaxFloorRequest;
			return soap_in_ns__changeMaxFloorRequest(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:removeConference"))
		{	*type = SOAP_TYPE_ns__removeConference;
			return soap_in_ns__removeConference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:addConference"))
		{	*type = SOAP_TYPE_ns__addConference;
			return soap_in_ns__addConference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:stop"))
		{	*type = SOAP_TYPE_ns__stop;
			return soap_in_ns__stop(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:start"))
		{	*type = SOAP_TYPE_ns__start;
			return soap_in_ns__start(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_unsignedShort:
		return soap_out_unsignedShort(soap, tag, id, (const unsigned short *)ptr, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns__ConferenceList:
		return ((ns__ConferenceList *)ptr)->soap_out(soap, tag, id, "ns:ConferenceList");
	case SOAP_TYPE_ns__getConferenceInfo:
		return soap_out_ns__getConferenceInfo(soap, tag, id, (const struct ns__getConferenceInfo *)ptr, "ns:getConferenceInfo");
	case SOAP_TYPE_ns__getConferenceInfoResponse:
		return soap_out_ns__getConferenceInfoResponse(soap, tag, id, (const struct ns__getConferenceInfoResponse *)ptr, "ns:getConferenceInfoResponse");
	case SOAP_TYPE_ns__getConferenceIDs:
		return soap_out_ns__getConferenceIDs(soap, tag, id, (const struct ns__getConferenceIDs *)ptr, "ns:getConferenceIDs");
	case SOAP_TYPE_ns__removeChair:
		return soap_out_ns__removeChair(soap, tag, id, (const struct ns__removeChair *)ptr, "ns:removeChair");
	case SOAP_TYPE_ns__addChair:
		return soap_out_ns__addChair(soap, tag, id, (const struct ns__addChair *)ptr, "ns:addChair");
	case SOAP_TYPE_ns__removeUser:
		return soap_out_ns__removeUser(soap, tag, id, (const struct ns__removeUser *)ptr, "ns:removeUser");
	case SOAP_TYPE_ns__addUser:
		return soap_out_ns__addUser(soap, tag, id, (const struct ns__addUser *)ptr, "ns:addUser");
	case SOAP_TYPE_ns__changeMaxGrantedNum:
		return soap_out_ns__changeMaxGrantedNum(soap, tag, id, (const struct ns__changeMaxGrantedNum *)ptr, "ns:changeMaxGrantedNum");
	case SOAP_TYPE_ns__removeFloor:
		return soap_out_ns__removeFloor(soap, tag, id, (const struct ns__removeFloor *)ptr, "ns:removeFloor");
	case SOAP_TYPE_ns__addFloor:
		return soap_out_ns__addFloor(soap, tag, id, (const struct ns__addFloor *)ptr, "ns:addFloor");
	case SOAP_TYPE_ns__changeAcceptPolicy:
		return soap_out_ns__changeAcceptPolicy(soap, tag, id, (const struct ns__changeAcceptPolicy *)ptr, "ns:changeAcceptPolicy");
	case SOAP_TYPE_ns__changeMaxFloorRequest:
		return soap_out_ns__changeMaxFloorRequest(soap, tag, id, (const struct ns__changeMaxFloorRequest *)ptr, "ns:changeMaxFloorRequest");
	case SOAP_TYPE_ns__removeConference:
		return soap_out_ns__removeConference(soap, tag, id, (const struct ns__removeConference *)ptr, "ns:removeConference");
	case SOAP_TYPE_ns__addConference:
		return soap_out_ns__addConference(soap, tag, id, (const struct ns__addConference *)ptr, "ns:addConference");
	case SOAP_TYPE_ns__stop:
		return soap_out_ns__stop(soap, tag, id, (const struct ns__stop *)ptr, "ns:stop");
	case SOAP_TYPE_ns__start:
		return soap_out_ns__start(soap, tag, id, (const struct ns__start *)ptr, "ns:start");
	case SOAP_TYPE_PointerTons__ConferenceList:
		return soap_out_PointerTons__ConferenceList(soap, tag, id, (ns__ConferenceList *const*)ptr, "ns:ConferenceList");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns__ConferenceList:
		((ns__ConferenceList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns__getConferenceInfo:
		soap_serialize_ns__getConferenceInfo(soap, (const struct ns__getConferenceInfo *)ptr);
		break;
	case SOAP_TYPE_ns__getConferenceInfoResponse:
		soap_serialize_ns__getConferenceInfoResponse(soap, (const struct ns__getConferenceInfoResponse *)ptr);
		break;
	case SOAP_TYPE_ns__getConferenceIDs:
		soap_serialize_ns__getConferenceIDs(soap, (const struct ns__getConferenceIDs *)ptr);
		break;
	case SOAP_TYPE_ns__removeChair:
		soap_serialize_ns__removeChair(soap, (const struct ns__removeChair *)ptr);
		break;
	case SOAP_TYPE_ns__addChair:
		soap_serialize_ns__addChair(soap, (const struct ns__addChair *)ptr);
		break;
	case SOAP_TYPE_ns__removeUser:
		soap_serialize_ns__removeUser(soap, (const struct ns__removeUser *)ptr);
		break;
	case SOAP_TYPE_ns__addUser:
		soap_serialize_ns__addUser(soap, (const struct ns__addUser *)ptr);
		break;
	case SOAP_TYPE_ns__changeMaxGrantedNum:
		soap_serialize_ns__changeMaxGrantedNum(soap, (const struct ns__changeMaxGrantedNum *)ptr);
		break;
	case SOAP_TYPE_ns__removeFloor:
		soap_serialize_ns__removeFloor(soap, (const struct ns__removeFloor *)ptr);
		break;
	case SOAP_TYPE_ns__addFloor:
		soap_serialize_ns__addFloor(soap, (const struct ns__addFloor *)ptr);
		break;
	case SOAP_TYPE_ns__changeAcceptPolicy:
		soap_serialize_ns__changeAcceptPolicy(soap, (const struct ns__changeAcceptPolicy *)ptr);
		break;
	case SOAP_TYPE_ns__changeMaxFloorRequest:
		soap_serialize_ns__changeMaxFloorRequest(soap, (const struct ns__changeMaxFloorRequest *)ptr);
		break;
	case SOAP_TYPE_ns__removeConference:
		soap_serialize_ns__removeConference(soap, (const struct ns__removeConference *)ptr);
		break;
	case SOAP_TYPE_ns__addConference:
		soap_serialize_ns__addConference(soap, (const struct ns__addConference *)ptr);
		break;
	case SOAP_TYPE_ns__stop:
		soap_serialize_ns__stop(soap, (const struct ns__stop *)ptr);
		break;
	case SOAP_TYPE_ns__start:
		soap_serialize_ns__start(soap, (const struct ns__start *)ptr);
		break;
	case SOAP_TYPE_PointerTons__ConferenceList:
		soap_serialize_PointerTons__ConferenceList(soap, (ns__ConferenceList *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_ns__ConferenceList:
		return (void*)soap_instantiate_ns__ConferenceList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__start:
		return (void*)soap_instantiate_ns__start(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__stop:
		return (void*)soap_instantiate_ns__stop(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__addConference:
		return (void*)soap_instantiate_ns__addConference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__removeConference:
		return (void*)soap_instantiate_ns__removeConference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__changeMaxFloorRequest:
		return (void*)soap_instantiate_ns__changeMaxFloorRequest(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__changeAcceptPolicy:
		return (void*)soap_instantiate_ns__changeAcceptPolicy(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__addFloor:
		return (void*)soap_instantiate_ns__addFloor(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__removeFloor:
		return (void*)soap_instantiate_ns__removeFloor(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__changeMaxGrantedNum:
		return (void*)soap_instantiate_ns__changeMaxGrantedNum(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__addUser:
		return (void*)soap_instantiate_ns__addUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__removeUser:
		return (void*)soap_instantiate_ns__removeUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__addChair:
		return (void*)soap_instantiate_ns__addChair(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__removeChair:
		return (void*)soap_instantiate_ns__removeChair(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getConferenceIDs:
		return (void*)soap_instantiate_ns__getConferenceIDs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getConferenceInfoResponse:
		return (void*)soap_instantiate_ns__getConferenceInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__getConferenceInfo:
		return (void*)soap_instantiate_ns__getConferenceInfo(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfunsignedInt:
		return (void*)soap_instantiate_std__vectorTemplateOfunsignedInt(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns__ConferenceList:
		if (p->size < 0)
			SOAP_DELETE((ns__ConferenceList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__ConferenceList*)p->ptr);
		break;
	case SOAP_TYPE_ns__start:
		if (p->size < 0)
			SOAP_DELETE((struct ns__start*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__start*)p->ptr);
		break;
	case SOAP_TYPE_ns__stop:
		if (p->size < 0)
			SOAP_DELETE((struct ns__stop*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__stop*)p->ptr);
		break;
	case SOAP_TYPE_ns__addConference:
		if (p->size < 0)
			SOAP_DELETE((struct ns__addConference*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__addConference*)p->ptr);
		break;
	case SOAP_TYPE_ns__removeConference:
		if (p->size < 0)
			SOAP_DELETE((struct ns__removeConference*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__removeConference*)p->ptr);
		break;
	case SOAP_TYPE_ns__changeMaxFloorRequest:
		if (p->size < 0)
			SOAP_DELETE((struct ns__changeMaxFloorRequest*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__changeMaxFloorRequest*)p->ptr);
		break;
	case SOAP_TYPE_ns__changeAcceptPolicy:
		if (p->size < 0)
			SOAP_DELETE((struct ns__changeAcceptPolicy*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__changeAcceptPolicy*)p->ptr);
		break;
	case SOAP_TYPE_ns__addFloor:
		if (p->size < 0)
			SOAP_DELETE((struct ns__addFloor*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__addFloor*)p->ptr);
		break;
	case SOAP_TYPE_ns__removeFloor:
		if (p->size < 0)
			SOAP_DELETE((struct ns__removeFloor*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__removeFloor*)p->ptr);
		break;
	case SOAP_TYPE_ns__changeMaxGrantedNum:
		if (p->size < 0)
			SOAP_DELETE((struct ns__changeMaxGrantedNum*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__changeMaxGrantedNum*)p->ptr);
		break;
	case SOAP_TYPE_ns__addUser:
		if (p->size < 0)
			SOAP_DELETE((struct ns__addUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__addUser*)p->ptr);
		break;
	case SOAP_TYPE_ns__removeUser:
		if (p->size < 0)
			SOAP_DELETE((struct ns__removeUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__removeUser*)p->ptr);
		break;
	case SOAP_TYPE_ns__addChair:
		if (p->size < 0)
			SOAP_DELETE((struct ns__addChair*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__addChair*)p->ptr);
		break;
	case SOAP_TYPE_ns__removeChair:
		if (p->size < 0)
			SOAP_DELETE((struct ns__removeChair*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__removeChair*)p->ptr);
		break;
	case SOAP_TYPE_ns__getConferenceIDs:
		if (p->size < 0)
			SOAP_DELETE((struct ns__getConferenceIDs*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__getConferenceIDs*)p->ptr);
		break;
	case SOAP_TYPE_ns__getConferenceInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__getConferenceInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__getConferenceInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__getConferenceInfo:
		if (p->size < 0)
			SOAP_DELETE((struct ns__getConferenceInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__getConferenceInfo*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfunsignedInt:
		if (p->size < 0)
			SOAP_DELETE((std::vector<unsigned int >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<unsigned int >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfunsignedInt:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<unsigned int >*)p)[len] = *(unsigned int *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{	short *p;
	p = soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_short);
	if (soap_out_short(soap, tag?tag:"short", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap *soap, unsigned short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedShort
	*a = SOAP_DEFAULT_unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap *soap, const char *tag, int id, const unsigned short *a, const char *type)
{
	return soap_outunsignedShort(soap, tag, id, a, type, SOAP_TYPE_unsignedShort);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap *soap, const char *tag, unsigned short *a, const char *type)
{	unsigned short *p;
	p = soap_inunsignedShort(soap, tag, a, type, SOAP_TYPE_unsignedShort);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap *soap, const unsigned short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_unsignedShort);
	if (soap_out_unsignedShort(soap, tag?tag:"unsignedShort", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap *soap, unsigned short *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns__ConferenceList::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfunsignedInt(soap, &this->ns__ConferenceList::conferenceIDs);
}

void ns__ConferenceList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfunsignedInt(soap, &this->ns__ConferenceList::conferenceIDs);
#endif
}

int ns__ConferenceList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__ConferenceList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ConferenceList(struct soap *soap, const char *tag, int id, const ns__ConferenceList *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__ConferenceList), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfunsignedInt(soap, "conferenceIDs", -1, &(a->ns__ConferenceList::conferenceIDs), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__ConferenceList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__ConferenceList(soap, tag, this, type);
}

SOAP_FMAC3 ns__ConferenceList * SOAP_FMAC4 soap_in_ns__ConferenceList(struct soap *soap, const char *tag, ns__ConferenceList *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__ConferenceList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__ConferenceList, sizeof(ns__ConferenceList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns__ConferenceList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__ConferenceList *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfunsignedInt(soap, "conferenceIDs", &(a->ns__ConferenceList::conferenceIDs), "xsd:unsignedInt"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__ConferenceList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__ConferenceList, 0, sizeof(ns__ConferenceList), 0, soap_copy_ns__ConferenceList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns__ConferenceList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_ns__ConferenceList);
	if (this->soap_out(soap, tag?tag:"ns:ConferenceList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__ConferenceList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__ConferenceList(soap, this, tag, type);
}

SOAP_FMAC3 ns__ConferenceList * SOAP_FMAC4 soap_get_ns__ConferenceList(struct soap *soap, ns__ConferenceList *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__ConferenceList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__ConferenceList * SOAP_FMAC2 soap_instantiate_ns__ConferenceList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__ConferenceList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__ConferenceList, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__ConferenceList);
		if (size)
			*size = sizeof(ns__ConferenceList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__ConferenceList, n);
		if (size)
			*size = n * sizeof(ns__ConferenceList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__ConferenceList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ConferenceList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__ConferenceList %p -> %p\n", q, p));
	*(ns__ConferenceList*)p = *(ns__ConferenceList*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getConferenceInfo(struct soap *soap, struct ns__getConferenceInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->conferenceID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getConferenceInfo(struct soap *soap, const struct ns__getConferenceInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getConferenceInfo(struct soap *soap, const char *tag, int id, const struct ns__getConferenceInfo *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getConferenceInfo), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "conferenceID", -1, &a->conferenceID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getConferenceInfo * SOAP_FMAC4 soap_in_ns__getConferenceInfo(struct soap *soap, const char *tag, struct ns__getConferenceInfo *a, const char *type)
{
	size_t soap_flag_conferenceID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getConferenceInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getConferenceInfo, sizeof(struct ns__getConferenceInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getConferenceInfo(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conferenceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "conferenceID", &a->conferenceID, "xsd:unsignedInt"))
				{	soap_flag_conferenceID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getConferenceInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getConferenceInfo, 0, sizeof(struct ns__getConferenceInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conferenceID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getConferenceInfo(struct soap *soap, const struct ns__getConferenceInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getConferenceInfo);
	if (soap_out_ns__getConferenceInfo(soap, tag?tag:"ns:getConferenceInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getConferenceInfo * SOAP_FMAC4 soap_get_ns__getConferenceInfo(struct soap *soap, struct ns__getConferenceInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getConferenceInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getConferenceInfo * SOAP_FMAC2 soap_instantiate_ns__getConferenceInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getConferenceInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getConferenceInfo, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__getConferenceInfo);
		if (size)
			*size = sizeof(struct ns__getConferenceInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__getConferenceInfo, n);
		if (size)
			*size = n * sizeof(struct ns__getConferenceInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getConferenceInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getConferenceInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getConferenceInfo %p -> %p\n", q, p));
	*(struct ns__getConferenceInfo*)p = *(struct ns__getConferenceInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getConferenceInfoResponse(struct soap *soap, struct ns__getConferenceInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->conferenceInfo);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getConferenceInfoResponse(struct soap *soap, const struct ns__getConferenceInfoResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->conferenceInfo);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getConferenceInfoResponse(struct soap *soap, const char *tag, int id, const struct ns__getConferenceInfoResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getConferenceInfoResponse), type))
		return soap->error;
	if (a->conferenceInfo)
	{	if (soap_out_string(soap, "conferenceInfo", -1, &a->conferenceInfo, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "conferenceInfo"))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getConferenceInfoResponse * SOAP_FMAC4 soap_in_ns__getConferenceInfoResponse(struct soap *soap, const char *tag, struct ns__getConferenceInfoResponse *a, const char *type)
{
	size_t soap_flag_conferenceInfo = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getConferenceInfoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getConferenceInfoResponse, sizeof(struct ns__getConferenceInfoResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getConferenceInfoResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conferenceInfo && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "conferenceInfo", &a->conferenceInfo, "xsd:string"))
				{	soap_flag_conferenceInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getConferenceInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getConferenceInfoResponse, 0, sizeof(struct ns__getConferenceInfoResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conferenceInfo > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getConferenceInfoResponse(struct soap *soap, const struct ns__getConferenceInfoResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getConferenceInfoResponse);
	if (soap_out_ns__getConferenceInfoResponse(soap, tag?tag:"ns:getConferenceInfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getConferenceInfoResponse * SOAP_FMAC4 soap_get_ns__getConferenceInfoResponse(struct soap *soap, struct ns__getConferenceInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getConferenceInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getConferenceInfoResponse * SOAP_FMAC2 soap_instantiate_ns__getConferenceInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getConferenceInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getConferenceInfoResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__getConferenceInfoResponse);
		if (size)
			*size = sizeof(struct ns__getConferenceInfoResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__getConferenceInfoResponse, n);
		if (size)
			*size = n * sizeof(struct ns__getConferenceInfoResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getConferenceInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getConferenceInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getConferenceInfoResponse %p -> %p\n", q, p));
	*(struct ns__getConferenceInfoResponse*)p = *(struct ns__getConferenceInfoResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getConferenceIDs(struct soap *soap, struct ns__getConferenceIDs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getConferenceIDs(struct soap *soap, const struct ns__getConferenceIDs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getConferenceIDs(struct soap *soap, const char *tag, int id, const struct ns__getConferenceIDs *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__getConferenceIDs), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__getConferenceIDs * SOAP_FMAC4 soap_in_ns__getConferenceIDs(struct soap *soap, const char *tag, struct ns__getConferenceIDs *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__getConferenceIDs *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__getConferenceIDs, sizeof(struct ns__getConferenceIDs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__getConferenceIDs(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__getConferenceIDs *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__getConferenceIDs, 0, sizeof(struct ns__getConferenceIDs), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getConferenceIDs(struct soap *soap, const struct ns__getConferenceIDs *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__getConferenceIDs);
	if (soap_out_ns__getConferenceIDs(soap, tag?tag:"ns:getConferenceIDs", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__getConferenceIDs * SOAP_FMAC4 soap_get_ns__getConferenceIDs(struct soap *soap, struct ns__getConferenceIDs *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__getConferenceIDs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__getConferenceIDs * SOAP_FMAC2 soap_instantiate_ns__getConferenceIDs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__getConferenceIDs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__getConferenceIDs, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__getConferenceIDs);
		if (size)
			*size = sizeof(struct ns__getConferenceIDs);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__getConferenceIDs, n);
		if (size)
			*size = n * sizeof(struct ns__getConferenceIDs);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__getConferenceIDs*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getConferenceIDs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__getConferenceIDs %p -> %p\n", q, p));
	*(struct ns__getConferenceIDs*)p = *(struct ns__getConferenceIDs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__removeChair(struct soap *soap, struct ns__removeChair *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->conferenceID);
	soap_default_unsignedShort(soap, &a->floorID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__removeChair(struct soap *soap, const struct ns__removeChair *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__removeChair(struct soap *soap, const char *tag, int id, const struct ns__removeChair *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__removeChair), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "conferenceID", -1, &a->conferenceID, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "floorID", -1, &a->floorID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__removeChair * SOAP_FMAC4 soap_in_ns__removeChair(struct soap *soap, const char *tag, struct ns__removeChair *a, const char *type)
{
	size_t soap_flag_conferenceID = 1;
	size_t soap_flag_floorID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__removeChair *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__removeChair, sizeof(struct ns__removeChair), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__removeChair(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conferenceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "conferenceID", &a->conferenceID, "xsd:unsignedInt"))
				{	soap_flag_conferenceID--;
					continue;
				}
			if (soap_flag_floorID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "floorID", &a->floorID, "xsd:unsignedShort"))
				{	soap_flag_floorID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__removeChair *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__removeChair, 0, sizeof(struct ns__removeChair), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conferenceID > 0 || soap_flag_floorID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__removeChair(struct soap *soap, const struct ns__removeChair *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__removeChair);
	if (soap_out_ns__removeChair(soap, tag?tag:"ns:removeChair", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__removeChair * SOAP_FMAC4 soap_get_ns__removeChair(struct soap *soap, struct ns__removeChair *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__removeChair(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__removeChair * SOAP_FMAC2 soap_instantiate_ns__removeChair(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__removeChair(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__removeChair, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__removeChair);
		if (size)
			*size = sizeof(struct ns__removeChair);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__removeChair, n);
		if (size)
			*size = n * sizeof(struct ns__removeChair);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__removeChair*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__removeChair(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__removeChair %p -> %p\n", q, p));
	*(struct ns__removeChair*)p = *(struct ns__removeChair*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addChair(struct soap *soap, struct ns__addChair *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->conferenceID);
	soap_default_unsignedShort(soap, &a->floorID);
	soap_default_unsignedShort(soap, &a->userID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addChair(struct soap *soap, const struct ns__addChair *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addChair(struct soap *soap, const char *tag, int id, const struct ns__addChair *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__addChair), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "conferenceID", -1, &a->conferenceID, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "floorID", -1, &a->floorID, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "userID", -1, &a->userID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__addChair * SOAP_FMAC4 soap_in_ns__addChair(struct soap *soap, const char *tag, struct ns__addChair *a, const char *type)
{
	size_t soap_flag_conferenceID = 1;
	size_t soap_flag_floorID = 1;
	size_t soap_flag_userID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__addChair *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__addChair, sizeof(struct ns__addChair), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__addChair(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conferenceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "conferenceID", &a->conferenceID, "xsd:unsignedInt"))
				{	soap_flag_conferenceID--;
					continue;
				}
			if (soap_flag_floorID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "floorID", &a->floorID, "xsd:unsignedShort"))
				{	soap_flag_floorID--;
					continue;
				}
			if (soap_flag_userID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "userID", &a->userID, "xsd:unsignedShort"))
				{	soap_flag_userID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__addChair *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__addChair, 0, sizeof(struct ns__addChair), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conferenceID > 0 || soap_flag_floorID > 0 || soap_flag_userID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addChair(struct soap *soap, const struct ns__addChair *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__addChair);
	if (soap_out_ns__addChair(soap, tag?tag:"ns:addChair", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__addChair * SOAP_FMAC4 soap_get_ns__addChair(struct soap *soap, struct ns__addChair *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__addChair(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__addChair * SOAP_FMAC2 soap_instantiate_ns__addChair(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__addChair(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__addChair, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__addChair);
		if (size)
			*size = sizeof(struct ns__addChair);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__addChair, n);
		if (size)
			*size = n * sizeof(struct ns__addChair);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__addChair*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addChair(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__addChair %p -> %p\n", q, p));
	*(struct ns__addChair*)p = *(struct ns__addChair*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__removeUser(struct soap *soap, struct ns__removeUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->conferenceID);
	soap_default_unsignedShort(soap, &a->userID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__removeUser(struct soap *soap, const struct ns__removeUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__removeUser(struct soap *soap, const char *tag, int id, const struct ns__removeUser *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__removeUser), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "conferenceID", -1, &a->conferenceID, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "userID", -1, &a->userID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__removeUser * SOAP_FMAC4 soap_in_ns__removeUser(struct soap *soap, const char *tag, struct ns__removeUser *a, const char *type)
{
	size_t soap_flag_conferenceID = 1;
	size_t soap_flag_userID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__removeUser *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__removeUser, sizeof(struct ns__removeUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__removeUser(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conferenceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "conferenceID", &a->conferenceID, "xsd:unsignedInt"))
				{	soap_flag_conferenceID--;
					continue;
				}
			if (soap_flag_userID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "userID", &a->userID, "xsd:unsignedShort"))
				{	soap_flag_userID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__removeUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__removeUser, 0, sizeof(struct ns__removeUser), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conferenceID > 0 || soap_flag_userID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__removeUser(struct soap *soap, const struct ns__removeUser *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__removeUser);
	if (soap_out_ns__removeUser(soap, tag?tag:"ns:removeUser", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__removeUser * SOAP_FMAC4 soap_get_ns__removeUser(struct soap *soap, struct ns__removeUser *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__removeUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__removeUser * SOAP_FMAC2 soap_instantiate_ns__removeUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__removeUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__removeUser, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__removeUser);
		if (size)
			*size = sizeof(struct ns__removeUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__removeUser, n);
		if (size)
			*size = n * sizeof(struct ns__removeUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__removeUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__removeUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__removeUser %p -> %p\n", q, p));
	*(struct ns__removeUser*)p = *(struct ns__removeUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addUser(struct soap *soap, struct ns__addUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->conferenceID);
	soap_default_unsignedShort(soap, &a->userID);
	soap_default_string(soap, &a->userName);
	soap_default_string(soap, &a->userURI);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addUser(struct soap *soap, const struct ns__addUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->userName);
	soap_serialize_string(soap, &a->userURI);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addUser(struct soap *soap, const char *tag, int id, const struct ns__addUser *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__addUser), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "conferenceID", -1, &a->conferenceID, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "userID", -1, &a->userID, ""))
		return soap->error;
	if (soap_out_string(soap, "userName", -1, &a->userName, ""))
		return soap->error;
	if (soap_out_string(soap, "userURI", -1, &a->userURI, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__addUser * SOAP_FMAC4 soap_in_ns__addUser(struct soap *soap, const char *tag, struct ns__addUser *a, const char *type)
{
	size_t soap_flag_conferenceID = 1;
	size_t soap_flag_userID = 1;
	size_t soap_flag_userName = 1;
	size_t soap_flag_userURI = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__addUser *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__addUser, sizeof(struct ns__addUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__addUser(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conferenceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "conferenceID", &a->conferenceID, "xsd:unsignedInt"))
				{	soap_flag_conferenceID--;
					continue;
				}
			if (soap_flag_userID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "userID", &a->userID, "xsd:unsignedShort"))
				{	soap_flag_userID--;
					continue;
				}
			if (soap_flag_userName && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "userName", &a->userName, "xsd:string"))
				{	soap_flag_userName--;
					continue;
				}
			if (soap_flag_userURI && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "userURI", &a->userURI, "xsd:string"))
				{	soap_flag_userURI--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__addUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__addUser, 0, sizeof(struct ns__addUser), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conferenceID > 0 || soap_flag_userID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addUser(struct soap *soap, const struct ns__addUser *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__addUser);
	if (soap_out_ns__addUser(soap, tag?tag:"ns:addUser", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__addUser * SOAP_FMAC4 soap_get_ns__addUser(struct soap *soap, struct ns__addUser *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__addUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__addUser * SOAP_FMAC2 soap_instantiate_ns__addUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__addUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__addUser, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__addUser);
		if (size)
			*size = sizeof(struct ns__addUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__addUser, n);
		if (size)
			*size = n * sizeof(struct ns__addUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__addUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__addUser %p -> %p\n", q, p));
	*(struct ns__addUser*)p = *(struct ns__addUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__changeMaxGrantedNum(struct soap *soap, struct ns__changeMaxGrantedNum *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->conferenceID);
	soap_default_unsignedShort(soap, &a->floorID);
	soap_default_unsignedShort(soap, &a->maxGrantedNum);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__changeMaxGrantedNum(struct soap *soap, const struct ns__changeMaxGrantedNum *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__changeMaxGrantedNum(struct soap *soap, const char *tag, int id, const struct ns__changeMaxGrantedNum *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__changeMaxGrantedNum), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "conferenceID", -1, &a->conferenceID, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "floorID", -1, &a->floorID, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "maxGrantedNum", -1, &a->maxGrantedNum, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__changeMaxGrantedNum * SOAP_FMAC4 soap_in_ns__changeMaxGrantedNum(struct soap *soap, const char *tag, struct ns__changeMaxGrantedNum *a, const char *type)
{
	size_t soap_flag_conferenceID = 1;
	size_t soap_flag_floorID = 1;
	size_t soap_flag_maxGrantedNum = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__changeMaxGrantedNum *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__changeMaxGrantedNum, sizeof(struct ns__changeMaxGrantedNum), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__changeMaxGrantedNum(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conferenceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "conferenceID", &a->conferenceID, "xsd:unsignedInt"))
				{	soap_flag_conferenceID--;
					continue;
				}
			if (soap_flag_floorID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "floorID", &a->floorID, "xsd:unsignedShort"))
				{	soap_flag_floorID--;
					continue;
				}
			if (soap_flag_maxGrantedNum && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "maxGrantedNum", &a->maxGrantedNum, "xsd:unsignedShort"))
				{	soap_flag_maxGrantedNum--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__changeMaxGrantedNum *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__changeMaxGrantedNum, 0, sizeof(struct ns__changeMaxGrantedNum), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conferenceID > 0 || soap_flag_floorID > 0 || soap_flag_maxGrantedNum > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__changeMaxGrantedNum(struct soap *soap, const struct ns__changeMaxGrantedNum *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__changeMaxGrantedNum);
	if (soap_out_ns__changeMaxGrantedNum(soap, tag?tag:"ns:changeMaxGrantedNum", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__changeMaxGrantedNum * SOAP_FMAC4 soap_get_ns__changeMaxGrantedNum(struct soap *soap, struct ns__changeMaxGrantedNum *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__changeMaxGrantedNum(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__changeMaxGrantedNum * SOAP_FMAC2 soap_instantiate_ns__changeMaxGrantedNum(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__changeMaxGrantedNum(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__changeMaxGrantedNum, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__changeMaxGrantedNum);
		if (size)
			*size = sizeof(struct ns__changeMaxGrantedNum);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__changeMaxGrantedNum, n);
		if (size)
			*size = n * sizeof(struct ns__changeMaxGrantedNum);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__changeMaxGrantedNum*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__changeMaxGrantedNum(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__changeMaxGrantedNum %p -> %p\n", q, p));
	*(struct ns__changeMaxGrantedNum*)p = *(struct ns__changeMaxGrantedNum*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__removeFloor(struct soap *soap, struct ns__removeFloor *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->conferenceID);
	soap_default_unsignedShort(soap, &a->floorID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__removeFloor(struct soap *soap, const struct ns__removeFloor *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__removeFloor(struct soap *soap, const char *tag, int id, const struct ns__removeFloor *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__removeFloor), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "conferenceID", -1, &a->conferenceID, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "floorID", -1, &a->floorID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__removeFloor * SOAP_FMAC4 soap_in_ns__removeFloor(struct soap *soap, const char *tag, struct ns__removeFloor *a, const char *type)
{
	size_t soap_flag_conferenceID = 1;
	size_t soap_flag_floorID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__removeFloor *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__removeFloor, sizeof(struct ns__removeFloor), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__removeFloor(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conferenceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "conferenceID", &a->conferenceID, "xsd:unsignedInt"))
				{	soap_flag_conferenceID--;
					continue;
				}
			if (soap_flag_floorID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "floorID", &a->floorID, "xsd:unsignedShort"))
				{	soap_flag_floorID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__removeFloor *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__removeFloor, 0, sizeof(struct ns__removeFloor), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conferenceID > 0 || soap_flag_floorID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__removeFloor(struct soap *soap, const struct ns__removeFloor *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__removeFloor);
	if (soap_out_ns__removeFloor(soap, tag?tag:"ns:removeFloor", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__removeFloor * SOAP_FMAC4 soap_get_ns__removeFloor(struct soap *soap, struct ns__removeFloor *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__removeFloor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__removeFloor * SOAP_FMAC2 soap_instantiate_ns__removeFloor(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__removeFloor(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__removeFloor, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__removeFloor);
		if (size)
			*size = sizeof(struct ns__removeFloor);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__removeFloor, n);
		if (size)
			*size = n * sizeof(struct ns__removeFloor);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__removeFloor*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__removeFloor(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__removeFloor %p -> %p\n", q, p));
	*(struct ns__removeFloor*)p = *(struct ns__removeFloor*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addFloor(struct soap *soap, struct ns__addFloor *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->conferenceID);
	soap_default_unsignedShort(soap, &a->floorID);
	soap_default_unsignedShort(soap, &a->maxGrantedNum);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addFloor(struct soap *soap, const struct ns__addFloor *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addFloor(struct soap *soap, const char *tag, int id, const struct ns__addFloor *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__addFloor), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "conferenceID", -1, &a->conferenceID, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "floorID", -1, &a->floorID, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "maxGrantedNum", -1, &a->maxGrantedNum, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__addFloor * SOAP_FMAC4 soap_in_ns__addFloor(struct soap *soap, const char *tag, struct ns__addFloor *a, const char *type)
{
	size_t soap_flag_conferenceID = 1;
	size_t soap_flag_floorID = 1;
	size_t soap_flag_maxGrantedNum = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__addFloor *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__addFloor, sizeof(struct ns__addFloor), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__addFloor(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conferenceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "conferenceID", &a->conferenceID, "xsd:unsignedInt"))
				{	soap_flag_conferenceID--;
					continue;
				}
			if (soap_flag_floorID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "floorID", &a->floorID, "xsd:unsignedShort"))
				{	soap_flag_floorID--;
					continue;
				}
			if (soap_flag_maxGrantedNum && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "maxGrantedNum", &a->maxGrantedNum, "xsd:unsignedShort"))
				{	soap_flag_maxGrantedNum--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__addFloor *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__addFloor, 0, sizeof(struct ns__addFloor), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conferenceID > 0 || soap_flag_floorID > 0 || soap_flag_maxGrantedNum > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addFloor(struct soap *soap, const struct ns__addFloor *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__addFloor);
	if (soap_out_ns__addFloor(soap, tag?tag:"ns:addFloor", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__addFloor * SOAP_FMAC4 soap_get_ns__addFloor(struct soap *soap, struct ns__addFloor *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__addFloor(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__addFloor * SOAP_FMAC2 soap_instantiate_ns__addFloor(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__addFloor(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__addFloor, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__addFloor);
		if (size)
			*size = sizeof(struct ns__addFloor);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__addFloor, n);
		if (size)
			*size = n * sizeof(struct ns__addFloor);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__addFloor*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addFloor(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__addFloor %p -> %p\n", q, p));
	*(struct ns__addFloor*)p = *(struct ns__addFloor*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__changeAcceptPolicy(struct soap *soap, struct ns__changeAcceptPolicy *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->conferenceID);
	soap_default_string(soap, &a->policy);
	soap_default_double(soap, &a->timeForChairActoin);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__changeAcceptPolicy(struct soap *soap, const struct ns__changeAcceptPolicy *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->policy);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__changeAcceptPolicy(struct soap *soap, const char *tag, int id, const struct ns__changeAcceptPolicy *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__changeAcceptPolicy), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "conferenceID", -1, &a->conferenceID, ""))
		return soap->error;
	if (soap_out_string(soap, "policy", -1, &a->policy, ""))
		return soap->error;
	if (soap_out_double(soap, "timeForChairActoin", -1, &a->timeForChairActoin, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__changeAcceptPolicy * SOAP_FMAC4 soap_in_ns__changeAcceptPolicy(struct soap *soap, const char *tag, struct ns__changeAcceptPolicy *a, const char *type)
{
	size_t soap_flag_conferenceID = 1;
	size_t soap_flag_policy = 1;
	size_t soap_flag_timeForChairActoin = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__changeAcceptPolicy *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__changeAcceptPolicy, sizeof(struct ns__changeAcceptPolicy), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__changeAcceptPolicy(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conferenceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "conferenceID", &a->conferenceID, "xsd:unsignedInt"))
				{	soap_flag_conferenceID--;
					continue;
				}
			if (soap_flag_policy && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "policy", &a->policy, "xsd:string"))
				{	soap_flag_policy--;
					continue;
				}
			if (soap_flag_timeForChairActoin && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "timeForChairActoin", &a->timeForChairActoin, "xsd:double"))
				{	soap_flag_timeForChairActoin--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__changeAcceptPolicy *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__changeAcceptPolicy, 0, sizeof(struct ns__changeAcceptPolicy), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conferenceID > 0 || soap_flag_timeForChairActoin > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__changeAcceptPolicy(struct soap *soap, const struct ns__changeAcceptPolicy *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__changeAcceptPolicy);
	if (soap_out_ns__changeAcceptPolicy(soap, tag?tag:"ns:changeAcceptPolicy", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__changeAcceptPolicy * SOAP_FMAC4 soap_get_ns__changeAcceptPolicy(struct soap *soap, struct ns__changeAcceptPolicy *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__changeAcceptPolicy(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__changeAcceptPolicy * SOAP_FMAC2 soap_instantiate_ns__changeAcceptPolicy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__changeAcceptPolicy(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__changeAcceptPolicy, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__changeAcceptPolicy);
		if (size)
			*size = sizeof(struct ns__changeAcceptPolicy);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__changeAcceptPolicy, n);
		if (size)
			*size = n * sizeof(struct ns__changeAcceptPolicy);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__changeAcceptPolicy*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__changeAcceptPolicy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__changeAcceptPolicy %p -> %p\n", q, p));
	*(struct ns__changeAcceptPolicy*)p = *(struct ns__changeAcceptPolicy*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__changeMaxFloorRequest(struct soap *soap, struct ns__changeMaxFloorRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->conferenceID);
	soap_default_unsignedShort(soap, &a->maxFloorRequest);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__changeMaxFloorRequest(struct soap *soap, const struct ns__changeMaxFloorRequest *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__changeMaxFloorRequest(struct soap *soap, const char *tag, int id, const struct ns__changeMaxFloorRequest *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__changeMaxFloorRequest), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "conferenceID", -1, &a->conferenceID, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "maxFloorRequest", -1, &a->maxFloorRequest, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__changeMaxFloorRequest * SOAP_FMAC4 soap_in_ns__changeMaxFloorRequest(struct soap *soap, const char *tag, struct ns__changeMaxFloorRequest *a, const char *type)
{
	size_t soap_flag_conferenceID = 1;
	size_t soap_flag_maxFloorRequest = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__changeMaxFloorRequest *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__changeMaxFloorRequest, sizeof(struct ns__changeMaxFloorRequest), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__changeMaxFloorRequest(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conferenceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "conferenceID", &a->conferenceID, "xsd:unsignedInt"))
				{	soap_flag_conferenceID--;
					continue;
				}
			if (soap_flag_maxFloorRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "maxFloorRequest", &a->maxFloorRequest, "xsd:unsignedShort"))
				{	soap_flag_maxFloorRequest--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__changeMaxFloorRequest *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__changeMaxFloorRequest, 0, sizeof(struct ns__changeMaxFloorRequest), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conferenceID > 0 || soap_flag_maxFloorRequest > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__changeMaxFloorRequest(struct soap *soap, const struct ns__changeMaxFloorRequest *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__changeMaxFloorRequest);
	if (soap_out_ns__changeMaxFloorRequest(soap, tag?tag:"ns:changeMaxFloorRequest", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__changeMaxFloorRequest * SOAP_FMAC4 soap_get_ns__changeMaxFloorRequest(struct soap *soap, struct ns__changeMaxFloorRequest *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__changeMaxFloorRequest(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__changeMaxFloorRequest * SOAP_FMAC2 soap_instantiate_ns__changeMaxFloorRequest(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__changeMaxFloorRequest(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__changeMaxFloorRequest, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__changeMaxFloorRequest);
		if (size)
			*size = sizeof(struct ns__changeMaxFloorRequest);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__changeMaxFloorRequest, n);
		if (size)
			*size = n * sizeof(struct ns__changeMaxFloorRequest);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__changeMaxFloorRequest*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__changeMaxFloorRequest(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__changeMaxFloorRequest %p -> %p\n", q, p));
	*(struct ns__changeMaxFloorRequest*)p = *(struct ns__changeMaxFloorRequest*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__removeConference(struct soap *soap, struct ns__removeConference *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->conferenceID);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__removeConference(struct soap *soap, const struct ns__removeConference *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__removeConference(struct soap *soap, const char *tag, int id, const struct ns__removeConference *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__removeConference), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "conferenceID", -1, &a->conferenceID, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__removeConference * SOAP_FMAC4 soap_in_ns__removeConference(struct soap *soap, const char *tag, struct ns__removeConference *a, const char *type)
{
	size_t soap_flag_conferenceID = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__removeConference *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__removeConference, sizeof(struct ns__removeConference), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__removeConference(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conferenceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "conferenceID", &a->conferenceID, "xsd:unsignedInt"))
				{	soap_flag_conferenceID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__removeConference *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__removeConference, 0, sizeof(struct ns__removeConference), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conferenceID > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__removeConference(struct soap *soap, const struct ns__removeConference *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__removeConference);
	if (soap_out_ns__removeConference(soap, tag?tag:"ns:removeConference", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__removeConference * SOAP_FMAC4 soap_get_ns__removeConference(struct soap *soap, struct ns__removeConference *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__removeConference(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__removeConference * SOAP_FMAC2 soap_instantiate_ns__removeConference(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__removeConference(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__removeConference, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__removeConference);
		if (size)
			*size = sizeof(struct ns__removeConference);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__removeConference, n);
		if (size)
			*size = n * sizeof(struct ns__removeConference);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__removeConference*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__removeConference(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__removeConference %p -> %p\n", q, p));
	*(struct ns__removeConference*)p = *(struct ns__removeConference*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addConference(struct soap *soap, struct ns__addConference *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedInt(soap, &a->conferenceID);
	soap_default_unsignedShort(soap, &a->maxFloorRequest);
	soap_default_string(soap, &a->policy);
	soap_default_double(soap, &a->timeForChairAction);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addConference(struct soap *soap, const struct ns__addConference *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->policy);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addConference(struct soap *soap, const char *tag, int id, const struct ns__addConference *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__addConference), type))
		return soap->error;
	if (soap_out_unsignedInt(soap, "conferenceID", -1, &a->conferenceID, ""))
		return soap->error;
	if (soap_out_unsignedShort(soap, "maxFloorRequest", -1, &a->maxFloorRequest, ""))
		return soap->error;
	if (soap_out_string(soap, "policy", -1, &a->policy, ""))
		return soap->error;
	if (soap_out_double(soap, "timeForChairAction", -1, &a->timeForChairAction, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__addConference * SOAP_FMAC4 soap_in_ns__addConference(struct soap *soap, const char *tag, struct ns__addConference *a, const char *type)
{
	size_t soap_flag_conferenceID = 1;
	size_t soap_flag_maxFloorRequest = 1;
	size_t soap_flag_policy = 1;
	size_t soap_flag_timeForChairAction = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__addConference *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__addConference, sizeof(struct ns__addConference), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__addConference(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_conferenceID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "conferenceID", &a->conferenceID, "xsd:unsignedInt"))
				{	soap_flag_conferenceID--;
					continue;
				}
			if (soap_flag_maxFloorRequest && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "maxFloorRequest", &a->maxFloorRequest, "xsd:unsignedShort"))
				{	soap_flag_maxFloorRequest--;
					continue;
				}
			if (soap_flag_policy && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "policy", &a->policy, "xsd:string"))
				{	soap_flag_policy--;
					continue;
				}
			if (soap_flag_timeForChairAction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "timeForChairAction", &a->timeForChairAction, "xsd:double"))
				{	soap_flag_timeForChairAction--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__addConference *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__addConference, 0, sizeof(struct ns__addConference), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_conferenceID > 0 || soap_flag_maxFloorRequest > 0 || soap_flag_timeForChairAction > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addConference(struct soap *soap, const struct ns__addConference *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__addConference);
	if (soap_out_ns__addConference(soap, tag?tag:"ns:addConference", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__addConference * SOAP_FMAC4 soap_get_ns__addConference(struct soap *soap, struct ns__addConference *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__addConference(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__addConference * SOAP_FMAC2 soap_instantiate_ns__addConference(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__addConference(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__addConference, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__addConference);
		if (size)
			*size = sizeof(struct ns__addConference);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__addConference, n);
		if (size)
			*size = n * sizeof(struct ns__addConference);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__addConference*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addConference(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__addConference %p -> %p\n", q, p));
	*(struct ns__addConference*)p = *(struct ns__addConference*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__stop(struct soap *soap, struct ns__stop *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__stop(struct soap *soap, const struct ns__stop *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__stop(struct soap *soap, const char *tag, int id, const struct ns__stop *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__stop), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__stop * SOAP_FMAC4 soap_in_ns__stop(struct soap *soap, const char *tag, struct ns__stop *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__stop *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__stop, sizeof(struct ns__stop), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__stop(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__stop *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__stop, 0, sizeof(struct ns__stop), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__stop(struct soap *soap, const struct ns__stop *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__stop);
	if (soap_out_ns__stop(soap, tag?tag:"ns:stop", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__stop * SOAP_FMAC4 soap_get_ns__stop(struct soap *soap, struct ns__stop *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__stop(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__stop * SOAP_FMAC2 soap_instantiate_ns__stop(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__stop(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__stop, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__stop);
		if (size)
			*size = sizeof(struct ns__stop);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__stop, n);
		if (size)
			*size = n * sizeof(struct ns__stop);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__stop*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__stop(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__stop %p -> %p\n", q, p));
	*(struct ns__stop*)p = *(struct ns__stop*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__start(struct soap *soap, struct ns__start *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_unsignedShort(soap, &a->port);
	soap_default_bool(soap, &a->enbaleConnectionThread);
	soap_default_int(soap, &a->workThreadNum);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__start(struct soap *soap, const struct ns__start *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__start(struct soap *soap, const char *tag, int id, const struct ns__start *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__start), type))
		return soap->error;
	if (soap_out_unsignedShort(soap, "port", -1, &a->port, ""))
		return soap->error;
	if (soap_out_bool(soap, "enbaleConnectionThread", -1, &a->enbaleConnectionThread, ""))
		return soap->error;
	if (soap_out_int(soap, "workThreadNum", -1, &a->workThreadNum, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__start * SOAP_FMAC4 soap_in_ns__start(struct soap *soap, const char *tag, struct ns__start *a, const char *type)
{
	size_t soap_flag_port = 1;
	size_t soap_flag_enbaleConnectionThread = 1;
	size_t soap_flag_workThreadNum = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__start *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__start, sizeof(struct ns__start), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__start(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_port && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedShort(soap, "port", &a->port, "xsd:unsignedShort"))
				{	soap_flag_port--;
					continue;
				}
			if (soap_flag_enbaleConnectionThread && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "enbaleConnectionThread", &a->enbaleConnectionThread, "xsd:boolean"))
				{	soap_flag_enbaleConnectionThread--;
					continue;
				}
			if (soap_flag_workThreadNum && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "workThreadNum", &a->workThreadNum, "xsd:int"))
				{	soap_flag_workThreadNum--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__start *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__start, 0, sizeof(struct ns__start), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_port > 0 || soap_flag_enbaleConnectionThread > 0 || soap_flag_workThreadNum > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__start(struct soap *soap, const struct ns__start *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_ns__start);
	if (soap_out_ns__start(soap, tag?tag:"ns:start", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__start * SOAP_FMAC4 soap_get_ns__start(struct soap *soap, struct ns__start *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__start(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__start * SOAP_FMAC2 soap_instantiate_ns__start(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__start(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__start, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__start);
		if (size)
			*size = sizeof(struct ns__start);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__start, n);
		if (size)
			*size = n * sizeof(struct ns__start);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__start*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__start(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__start %p -> %p\n", q, p));
	*(struct ns__start*)p = *(struct ns__start*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ConferenceList(struct soap *soap, ns__ConferenceList *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__ConferenceList))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ConferenceList(struct soap *soap, const char *tag, int id, ns__ConferenceList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__ConferenceList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__ConferenceList ** SOAP_FMAC4 soap_in_PointerTons__ConferenceList(struct soap *soap, const char *tag, ns__ConferenceList **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__ConferenceList **)soap_malloc(soap, sizeof(ns__ConferenceList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__ConferenceList *)soap_instantiate_ns__ConferenceList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__ConferenceList ** p = (ns__ConferenceList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__ConferenceList, sizeof(ns__ConferenceList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ConferenceList(struct soap *soap, ns__ConferenceList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTons__ConferenceList);
	if (soap_out_PointerTons__ConferenceList(soap, tag?tag:"ns:ConferenceList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__ConferenceList ** SOAP_FMAC4 soap_get_PointerTons__ConferenceList(struct soap *soap, ns__ConferenceList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__ConferenceList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfunsignedInt(struct soap *soap, std::vector<unsigned int >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfunsignedInt(struct soap *soap, const std::vector<unsigned int >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfunsignedInt(struct soap *soap, const char *tag, int id, const std::vector<unsigned int >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<unsigned int >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_unsignedInt(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<unsigned int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfunsignedInt(struct soap *soap, const char *tag, std::vector<unsigned int >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	unsigned int n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		soap_default_unsignedInt(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_unsignedInt, SOAP_TYPE_std__vectorTemplateOfunsignedInt, sizeof(unsigned int), 0))
				break;
			if (!soap_in_unsignedInt(soap, tag, NULL, "xsd:unsignedInt"))
				break;
		}
		else if (!soap_in_unsignedInt(soap, tag, &n, "xsd:unsignedInt"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfunsignedInt(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<unsigned int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfunsignedInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfunsignedInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfunsignedInt, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<unsigned int >);
		if (size)
			*size = sizeof(std::vector<unsigned int >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<unsigned int >, n);
		if (size)
			*size = n * sizeof(std::vector<unsigned int >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<unsigned int >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfunsignedInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<unsigned int > %p -> %p\n", q, p));
	*(std::vector<unsigned int >*)p = *(std::vector<unsigned int >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */

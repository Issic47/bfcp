/* soapH.h
   Generated by gSOAP 2.8.21 from server.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_short
#define SOAP_TYPE_short (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap*, short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

#ifndef soap_write_short
#define soap_write_short(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_short(soap, data),0) || soap_put_short(soap, data, "short", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

#ifndef soap_read_short
#define soap_read_short(soap, data) ( soap_begin_recv(soap) || !soap_get_short(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_double(soap, data),0) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedShort
#define SOAP_TYPE_unsignedShort (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap*, unsigned short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap*, const char*, int, const unsigned short *, const char*);
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap*, const char*, unsigned short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap*, const unsigned short *, const char*, const char*);

#ifndef soap_write_unsignedShort
#define soap_write_unsignedShort(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedShort(soap, data),0) || soap_put_unsignedShort(soap, data, "unsignedShort", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap*, unsigned short *, const char*, const char*);

#ifndef soap_read_unsignedShort
#define soap_read_unsignedShort(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedShort(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedInt(soap, data),0) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data),0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_ns__ConferenceList
#define SOAP_TYPE_ns__ConferenceList (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__ConferenceList(struct soap*, const char*, int, const ns__ConferenceList *, const char*);
SOAP_FMAC3 ns__ConferenceList * SOAP_FMAC4 soap_in_ns__ConferenceList(struct soap*, const char*, ns__ConferenceList *, const char*);

#ifndef soap_write_ns__ConferenceList
#define soap_write_ns__ConferenceList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:ConferenceList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__ConferenceList * SOAP_FMAC4 soap_get_ns__ConferenceList(struct soap*, ns__ConferenceList *, const char*, const char*);

#ifndef soap_read_ns__ConferenceList
#define soap_read_ns__ConferenceList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__ConferenceList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__ConferenceList * SOAP_FMAC2 soap_instantiate_ns__ConferenceList(struct soap*, int, const char*, const char*, size_t*);

inline ns__ConferenceList * soap_new_ns__ConferenceList(struct soap *soap, int n = -1) { return soap_instantiate_ns__ConferenceList(soap, n, NULL, NULL, NULL); }

inline ns__ConferenceList * soap_new_req_ns__ConferenceList(struct soap *soap) { ns__ConferenceList *_p = soap_instantiate_ns__ConferenceList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns__ConferenceList * soap_new_set_ns__ConferenceList(struct soap *soap, std::vector<unsigned int >& conferenceIDs) { ns__ConferenceList *_p = soap_instantiate_ns__ConferenceList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__ConferenceList::conferenceIDs = conferenceIDs; } return _p; }

inline void soap_delete_ns__ConferenceList(struct soap *soap, ns__ConferenceList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__ConferenceList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns__getConferenceInfo
#define SOAP_TYPE_ns__getConferenceInfo (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getConferenceInfo(struct soap*, struct ns__getConferenceInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getConferenceInfo(struct soap*, const struct ns__getConferenceInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getConferenceInfo(struct soap*, const char*, int, const struct ns__getConferenceInfo *, const char*);
SOAP_FMAC3 struct ns__getConferenceInfo * SOAP_FMAC4 soap_in_ns__getConferenceInfo(struct soap*, const char*, struct ns__getConferenceInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getConferenceInfo(struct soap*, const struct ns__getConferenceInfo *, const char*, const char*);

#ifndef soap_write_ns__getConferenceInfo
#define soap_write_ns__getConferenceInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getConferenceInfo(soap, data),0) || soap_put_ns__getConferenceInfo(soap, data, "ns:getConferenceInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getConferenceInfo * SOAP_FMAC4 soap_get_ns__getConferenceInfo(struct soap*, struct ns__getConferenceInfo *, const char*, const char*);

#ifndef soap_read_ns__getConferenceInfo
#define soap_read_ns__getConferenceInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getConferenceInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getConferenceInfo * SOAP_FMAC2 soap_instantiate_ns__getConferenceInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getConferenceInfo * soap_new_ns__getConferenceInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns__getConferenceInfo(soap, n, NULL, NULL, NULL); }

inline struct ns__getConferenceInfo * soap_new_req_ns__getConferenceInfo(struct soap *soap, unsigned int conferenceID) { struct ns__getConferenceInfo *_p = soap_instantiate_ns__getConferenceInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getConferenceInfo(soap, _p); _p->conferenceID = conferenceID; } return _p; }

inline struct ns__getConferenceInfo * soap_new_set_ns__getConferenceInfo(struct soap *soap, unsigned int conferenceID) { struct ns__getConferenceInfo *_p = soap_instantiate_ns__getConferenceInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getConferenceInfo(soap, _p); _p->conferenceID = conferenceID; } return _p; }

inline void soap_delete_ns__getConferenceInfo(struct soap *soap, struct ns__getConferenceInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getConferenceInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getConferenceInfoResponse
#define SOAP_TYPE_ns__getConferenceInfoResponse (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getConferenceInfoResponse(struct soap*, struct ns__getConferenceInfoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getConferenceInfoResponse(struct soap*, const struct ns__getConferenceInfoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getConferenceInfoResponse(struct soap*, const char*, int, const struct ns__getConferenceInfoResponse *, const char*);
SOAP_FMAC3 struct ns__getConferenceInfoResponse * SOAP_FMAC4 soap_in_ns__getConferenceInfoResponse(struct soap*, const char*, struct ns__getConferenceInfoResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getConferenceInfoResponse(struct soap*, const struct ns__getConferenceInfoResponse *, const char*, const char*);

#ifndef soap_write_ns__getConferenceInfoResponse
#define soap_write_ns__getConferenceInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getConferenceInfoResponse(soap, data),0) || soap_put_ns__getConferenceInfoResponse(soap, data, "ns:getConferenceInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getConferenceInfoResponse * SOAP_FMAC4 soap_get_ns__getConferenceInfoResponse(struct soap*, struct ns__getConferenceInfoResponse *, const char*, const char*);

#ifndef soap_read_ns__getConferenceInfoResponse
#define soap_read_ns__getConferenceInfoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getConferenceInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getConferenceInfoResponse * SOAP_FMAC2 soap_instantiate_ns__getConferenceInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getConferenceInfoResponse * soap_new_ns__getConferenceInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__getConferenceInfoResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__getConferenceInfoResponse * soap_new_req_ns__getConferenceInfoResponse(struct soap *soap, char *conferenceInfo) { struct ns__getConferenceInfoResponse *_p = soap_instantiate_ns__getConferenceInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getConferenceInfoResponse(soap, _p); _p->conferenceInfo = conferenceInfo; } return _p; }

inline struct ns__getConferenceInfoResponse * soap_new_set_ns__getConferenceInfoResponse(struct soap *soap, char *conferenceInfo) { struct ns__getConferenceInfoResponse *_p = soap_instantiate_ns__getConferenceInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getConferenceInfoResponse(soap, _p); _p->conferenceInfo = conferenceInfo; } return _p; }

inline void soap_delete_ns__getConferenceInfoResponse(struct soap *soap, struct ns__getConferenceInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getConferenceInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__getConferenceIDs
#define SOAP_TYPE_ns__getConferenceIDs (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__getConferenceIDs(struct soap*, struct ns__getConferenceIDs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__getConferenceIDs(struct soap*, const struct ns__getConferenceIDs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__getConferenceIDs(struct soap*, const char*, int, const struct ns__getConferenceIDs *, const char*);
SOAP_FMAC3 struct ns__getConferenceIDs * SOAP_FMAC4 soap_in_ns__getConferenceIDs(struct soap*, const char*, struct ns__getConferenceIDs *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__getConferenceIDs(struct soap*, const struct ns__getConferenceIDs *, const char*, const char*);

#ifndef soap_write_ns__getConferenceIDs
#define soap_write_ns__getConferenceIDs(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__getConferenceIDs(soap, data),0) || soap_put_ns__getConferenceIDs(soap, data, "ns:getConferenceIDs", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__getConferenceIDs * SOAP_FMAC4 soap_get_ns__getConferenceIDs(struct soap*, struct ns__getConferenceIDs *, const char*, const char*);

#ifndef soap_read_ns__getConferenceIDs
#define soap_read_ns__getConferenceIDs(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__getConferenceIDs(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__getConferenceIDs * SOAP_FMAC2 soap_instantiate_ns__getConferenceIDs(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__getConferenceIDs * soap_new_ns__getConferenceIDs(struct soap *soap, int n = -1) { return soap_instantiate_ns__getConferenceIDs(soap, n, NULL, NULL, NULL); }

inline struct ns__getConferenceIDs * soap_new_req_ns__getConferenceIDs(struct soap *soap) { struct ns__getConferenceIDs *_p = soap_instantiate_ns__getConferenceIDs(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getConferenceIDs(soap, _p); } return _p; }

inline struct ns__getConferenceIDs * soap_new_set_ns__getConferenceIDs(struct soap *soap) { struct ns__getConferenceIDs *_p = soap_instantiate_ns__getConferenceIDs(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__getConferenceIDs(soap, _p); } return _p; }

inline void soap_delete_ns__getConferenceIDs(struct soap *soap, struct ns__getConferenceIDs *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__getConferenceIDs(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__removeChair
#define SOAP_TYPE_ns__removeChair (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__removeChair(struct soap*, struct ns__removeChair *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__removeChair(struct soap*, const struct ns__removeChair *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__removeChair(struct soap*, const char*, int, const struct ns__removeChair *, const char*);
SOAP_FMAC3 struct ns__removeChair * SOAP_FMAC4 soap_in_ns__removeChair(struct soap*, const char*, struct ns__removeChair *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__removeChair(struct soap*, const struct ns__removeChair *, const char*, const char*);

#ifndef soap_write_ns__removeChair
#define soap_write_ns__removeChair(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__removeChair(soap, data),0) || soap_put_ns__removeChair(soap, data, "ns:removeChair", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__removeChair * SOAP_FMAC4 soap_get_ns__removeChair(struct soap*, struct ns__removeChair *, const char*, const char*);

#ifndef soap_read_ns__removeChair
#define soap_read_ns__removeChair(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__removeChair(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__removeChair * SOAP_FMAC2 soap_instantiate_ns__removeChair(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__removeChair * soap_new_ns__removeChair(struct soap *soap, int n = -1) { return soap_instantiate_ns__removeChair(soap, n, NULL, NULL, NULL); }

inline struct ns__removeChair * soap_new_req_ns__removeChair(struct soap *soap, unsigned int conferenceID, unsigned short floorID) { struct ns__removeChair *_p = soap_instantiate_ns__removeChair(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__removeChair(soap, _p); _p->conferenceID = conferenceID; _p->floorID = floorID; } return _p; }

inline struct ns__removeChair * soap_new_set_ns__removeChair(struct soap *soap, unsigned int conferenceID, unsigned short floorID) { struct ns__removeChair *_p = soap_instantiate_ns__removeChair(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__removeChair(soap, _p); _p->conferenceID = conferenceID; _p->floorID = floorID; } return _p; }

inline void soap_delete_ns__removeChair(struct soap *soap, struct ns__removeChair *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__removeChair(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__addChair
#define SOAP_TYPE_ns__addChair (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addChair(struct soap*, struct ns__addChair *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addChair(struct soap*, const struct ns__addChair *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addChair(struct soap*, const char*, int, const struct ns__addChair *, const char*);
SOAP_FMAC3 struct ns__addChair * SOAP_FMAC4 soap_in_ns__addChair(struct soap*, const char*, struct ns__addChair *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addChair(struct soap*, const struct ns__addChair *, const char*, const char*);

#ifndef soap_write_ns__addChair
#define soap_write_ns__addChair(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__addChair(soap, data),0) || soap_put_ns__addChair(soap, data, "ns:addChair", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__addChair * SOAP_FMAC4 soap_get_ns__addChair(struct soap*, struct ns__addChair *, const char*, const char*);

#ifndef soap_read_ns__addChair
#define soap_read_ns__addChair(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__addChair(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__addChair * SOAP_FMAC2 soap_instantiate_ns__addChair(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__addChair * soap_new_ns__addChair(struct soap *soap, int n = -1) { return soap_instantiate_ns__addChair(soap, n, NULL, NULL, NULL); }

inline struct ns__addChair * soap_new_req_ns__addChair(struct soap *soap, unsigned int conferenceID, unsigned short floorID, unsigned short userID) { struct ns__addChair *_p = soap_instantiate_ns__addChair(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addChair(soap, _p); _p->conferenceID = conferenceID; _p->floorID = floorID; _p->userID = userID; } return _p; }

inline struct ns__addChair * soap_new_set_ns__addChair(struct soap *soap, unsigned int conferenceID, unsigned short floorID, unsigned short userID) { struct ns__addChair *_p = soap_instantiate_ns__addChair(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addChair(soap, _p); _p->conferenceID = conferenceID; _p->floorID = floorID; _p->userID = userID; } return _p; }

inline void soap_delete_ns__addChair(struct soap *soap, struct ns__addChair *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addChair(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__removeUser
#define SOAP_TYPE_ns__removeUser (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__removeUser(struct soap*, struct ns__removeUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__removeUser(struct soap*, const struct ns__removeUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__removeUser(struct soap*, const char*, int, const struct ns__removeUser *, const char*);
SOAP_FMAC3 struct ns__removeUser * SOAP_FMAC4 soap_in_ns__removeUser(struct soap*, const char*, struct ns__removeUser *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__removeUser(struct soap*, const struct ns__removeUser *, const char*, const char*);

#ifndef soap_write_ns__removeUser
#define soap_write_ns__removeUser(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__removeUser(soap, data),0) || soap_put_ns__removeUser(soap, data, "ns:removeUser", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__removeUser * SOAP_FMAC4 soap_get_ns__removeUser(struct soap*, struct ns__removeUser *, const char*, const char*);

#ifndef soap_read_ns__removeUser
#define soap_read_ns__removeUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__removeUser(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__removeUser * SOAP_FMAC2 soap_instantiate_ns__removeUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__removeUser * soap_new_ns__removeUser(struct soap *soap, int n = -1) { return soap_instantiate_ns__removeUser(soap, n, NULL, NULL, NULL); }

inline struct ns__removeUser * soap_new_req_ns__removeUser(struct soap *soap, unsigned int conferenceID, unsigned short userID) { struct ns__removeUser *_p = soap_instantiate_ns__removeUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__removeUser(soap, _p); _p->conferenceID = conferenceID; _p->userID = userID; } return _p; }

inline struct ns__removeUser * soap_new_set_ns__removeUser(struct soap *soap, unsigned int conferenceID, unsigned short userID) { struct ns__removeUser *_p = soap_instantiate_ns__removeUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__removeUser(soap, _p); _p->conferenceID = conferenceID; _p->userID = userID; } return _p; }

inline void soap_delete_ns__removeUser(struct soap *soap, struct ns__removeUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__removeUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__addUser
#define SOAP_TYPE_ns__addUser (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addUser(struct soap*, struct ns__addUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addUser(struct soap*, const struct ns__addUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addUser(struct soap*, const char*, int, const struct ns__addUser *, const char*);
SOAP_FMAC3 struct ns__addUser * SOAP_FMAC4 soap_in_ns__addUser(struct soap*, const char*, struct ns__addUser *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addUser(struct soap*, const struct ns__addUser *, const char*, const char*);

#ifndef soap_write_ns__addUser
#define soap_write_ns__addUser(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__addUser(soap, data),0) || soap_put_ns__addUser(soap, data, "ns:addUser", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__addUser * SOAP_FMAC4 soap_get_ns__addUser(struct soap*, struct ns__addUser *, const char*, const char*);

#ifndef soap_read_ns__addUser
#define soap_read_ns__addUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__addUser(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__addUser * SOAP_FMAC2 soap_instantiate_ns__addUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__addUser * soap_new_ns__addUser(struct soap *soap, int n = -1) { return soap_instantiate_ns__addUser(soap, n, NULL, NULL, NULL); }

inline struct ns__addUser * soap_new_req_ns__addUser(struct soap *soap, unsigned int conferenceID, unsigned short userID) { struct ns__addUser *_p = soap_instantiate_ns__addUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addUser(soap, _p); _p->conferenceID = conferenceID; _p->userID = userID; } return _p; }

inline struct ns__addUser * soap_new_set_ns__addUser(struct soap *soap, unsigned int conferenceID, unsigned short userID, char *userName, char *userURI) { struct ns__addUser *_p = soap_instantiate_ns__addUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addUser(soap, _p); _p->conferenceID = conferenceID; _p->userID = userID; _p->userName = userName; _p->userURI = userURI; } return _p; }

inline void soap_delete_ns__addUser(struct soap *soap, struct ns__addUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__changeMaxGrantedNum
#define SOAP_TYPE_ns__changeMaxGrantedNum (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__changeMaxGrantedNum(struct soap*, struct ns__changeMaxGrantedNum *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__changeMaxGrantedNum(struct soap*, const struct ns__changeMaxGrantedNum *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__changeMaxGrantedNum(struct soap*, const char*, int, const struct ns__changeMaxGrantedNum *, const char*);
SOAP_FMAC3 struct ns__changeMaxGrantedNum * SOAP_FMAC4 soap_in_ns__changeMaxGrantedNum(struct soap*, const char*, struct ns__changeMaxGrantedNum *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__changeMaxGrantedNum(struct soap*, const struct ns__changeMaxGrantedNum *, const char*, const char*);

#ifndef soap_write_ns__changeMaxGrantedNum
#define soap_write_ns__changeMaxGrantedNum(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__changeMaxGrantedNum(soap, data),0) || soap_put_ns__changeMaxGrantedNum(soap, data, "ns:changeMaxGrantedNum", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__changeMaxGrantedNum * SOAP_FMAC4 soap_get_ns__changeMaxGrantedNum(struct soap*, struct ns__changeMaxGrantedNum *, const char*, const char*);

#ifndef soap_read_ns__changeMaxGrantedNum
#define soap_read_ns__changeMaxGrantedNum(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__changeMaxGrantedNum(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__changeMaxGrantedNum * SOAP_FMAC2 soap_instantiate_ns__changeMaxGrantedNum(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__changeMaxGrantedNum * soap_new_ns__changeMaxGrantedNum(struct soap *soap, int n = -1) { return soap_instantiate_ns__changeMaxGrantedNum(soap, n, NULL, NULL, NULL); }

inline struct ns__changeMaxGrantedNum * soap_new_req_ns__changeMaxGrantedNum(struct soap *soap, unsigned int conferenceID, unsigned short floorID, unsigned short maxGrantedNum) { struct ns__changeMaxGrantedNum *_p = soap_instantiate_ns__changeMaxGrantedNum(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__changeMaxGrantedNum(soap, _p); _p->conferenceID = conferenceID; _p->floorID = floorID; _p->maxGrantedNum = maxGrantedNum; } return _p; }

inline struct ns__changeMaxGrantedNum * soap_new_set_ns__changeMaxGrantedNum(struct soap *soap, unsigned int conferenceID, unsigned short floorID, unsigned short maxGrantedNum) { struct ns__changeMaxGrantedNum *_p = soap_instantiate_ns__changeMaxGrantedNum(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__changeMaxGrantedNum(soap, _p); _p->conferenceID = conferenceID; _p->floorID = floorID; _p->maxGrantedNum = maxGrantedNum; } return _p; }

inline void soap_delete_ns__changeMaxGrantedNum(struct soap *soap, struct ns__changeMaxGrantedNum *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__changeMaxGrantedNum(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__removeFloor
#define SOAP_TYPE_ns__removeFloor (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__removeFloor(struct soap*, struct ns__removeFloor *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__removeFloor(struct soap*, const struct ns__removeFloor *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__removeFloor(struct soap*, const char*, int, const struct ns__removeFloor *, const char*);
SOAP_FMAC3 struct ns__removeFloor * SOAP_FMAC4 soap_in_ns__removeFloor(struct soap*, const char*, struct ns__removeFloor *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__removeFloor(struct soap*, const struct ns__removeFloor *, const char*, const char*);

#ifndef soap_write_ns__removeFloor
#define soap_write_ns__removeFloor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__removeFloor(soap, data),0) || soap_put_ns__removeFloor(soap, data, "ns:removeFloor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__removeFloor * SOAP_FMAC4 soap_get_ns__removeFloor(struct soap*, struct ns__removeFloor *, const char*, const char*);

#ifndef soap_read_ns__removeFloor
#define soap_read_ns__removeFloor(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__removeFloor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__removeFloor * SOAP_FMAC2 soap_instantiate_ns__removeFloor(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__removeFloor * soap_new_ns__removeFloor(struct soap *soap, int n = -1) { return soap_instantiate_ns__removeFloor(soap, n, NULL, NULL, NULL); }

inline struct ns__removeFloor * soap_new_req_ns__removeFloor(struct soap *soap, unsigned int conferenceID, unsigned short floorID) { struct ns__removeFloor *_p = soap_instantiate_ns__removeFloor(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__removeFloor(soap, _p); _p->conferenceID = conferenceID; _p->floorID = floorID; } return _p; }

inline struct ns__removeFloor * soap_new_set_ns__removeFloor(struct soap *soap, unsigned int conferenceID, unsigned short floorID) { struct ns__removeFloor *_p = soap_instantiate_ns__removeFloor(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__removeFloor(soap, _p); _p->conferenceID = conferenceID; _p->floorID = floorID; } return _p; }

inline void soap_delete_ns__removeFloor(struct soap *soap, struct ns__removeFloor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__removeFloor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__addFloor
#define SOAP_TYPE_ns__addFloor (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addFloor(struct soap*, struct ns__addFloor *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addFloor(struct soap*, const struct ns__addFloor *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addFloor(struct soap*, const char*, int, const struct ns__addFloor *, const char*);
SOAP_FMAC3 struct ns__addFloor * SOAP_FMAC4 soap_in_ns__addFloor(struct soap*, const char*, struct ns__addFloor *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addFloor(struct soap*, const struct ns__addFloor *, const char*, const char*);

#ifndef soap_write_ns__addFloor
#define soap_write_ns__addFloor(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__addFloor(soap, data),0) || soap_put_ns__addFloor(soap, data, "ns:addFloor", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__addFloor * SOAP_FMAC4 soap_get_ns__addFloor(struct soap*, struct ns__addFloor *, const char*, const char*);

#ifndef soap_read_ns__addFloor
#define soap_read_ns__addFloor(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__addFloor(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__addFloor * SOAP_FMAC2 soap_instantiate_ns__addFloor(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__addFloor * soap_new_ns__addFloor(struct soap *soap, int n = -1) { return soap_instantiate_ns__addFloor(soap, n, NULL, NULL, NULL); }

inline struct ns__addFloor * soap_new_req_ns__addFloor(struct soap *soap, unsigned int conferenceID, unsigned short floorID, unsigned short maxGrantedNum) { struct ns__addFloor *_p = soap_instantiate_ns__addFloor(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addFloor(soap, _p); _p->conferenceID = conferenceID; _p->floorID = floorID; _p->maxGrantedNum = maxGrantedNum; } return _p; }

inline struct ns__addFloor * soap_new_set_ns__addFloor(struct soap *soap, unsigned int conferenceID, unsigned short floorID, unsigned short maxGrantedNum) { struct ns__addFloor *_p = soap_instantiate_ns__addFloor(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addFloor(soap, _p); _p->conferenceID = conferenceID; _p->floorID = floorID; _p->maxGrantedNum = maxGrantedNum; } return _p; }

inline void soap_delete_ns__addFloor(struct soap *soap, struct ns__addFloor *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addFloor(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__changeAcceptPolicy
#define SOAP_TYPE_ns__changeAcceptPolicy (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__changeAcceptPolicy(struct soap*, struct ns__changeAcceptPolicy *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__changeAcceptPolicy(struct soap*, const struct ns__changeAcceptPolicy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__changeAcceptPolicy(struct soap*, const char*, int, const struct ns__changeAcceptPolicy *, const char*);
SOAP_FMAC3 struct ns__changeAcceptPolicy * SOAP_FMAC4 soap_in_ns__changeAcceptPolicy(struct soap*, const char*, struct ns__changeAcceptPolicy *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__changeAcceptPolicy(struct soap*, const struct ns__changeAcceptPolicy *, const char*, const char*);

#ifndef soap_write_ns__changeAcceptPolicy
#define soap_write_ns__changeAcceptPolicy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__changeAcceptPolicy(soap, data),0) || soap_put_ns__changeAcceptPolicy(soap, data, "ns:changeAcceptPolicy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__changeAcceptPolicy * SOAP_FMAC4 soap_get_ns__changeAcceptPolicy(struct soap*, struct ns__changeAcceptPolicy *, const char*, const char*);

#ifndef soap_read_ns__changeAcceptPolicy
#define soap_read_ns__changeAcceptPolicy(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__changeAcceptPolicy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__changeAcceptPolicy * SOAP_FMAC2 soap_instantiate_ns__changeAcceptPolicy(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__changeAcceptPolicy * soap_new_ns__changeAcceptPolicy(struct soap *soap, int n = -1) { return soap_instantiate_ns__changeAcceptPolicy(soap, n, NULL, NULL, NULL); }

inline struct ns__changeAcceptPolicy * soap_new_req_ns__changeAcceptPolicy(struct soap *soap, unsigned int conferenceID, double timeForChairActoin) { struct ns__changeAcceptPolicy *_p = soap_instantiate_ns__changeAcceptPolicy(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__changeAcceptPolicy(soap, _p); _p->conferenceID = conferenceID; _p->timeForChairActoin = timeForChairActoin; } return _p; }

inline struct ns__changeAcceptPolicy * soap_new_set_ns__changeAcceptPolicy(struct soap *soap, unsigned int conferenceID, char *policy, double timeForChairActoin) { struct ns__changeAcceptPolicy *_p = soap_instantiate_ns__changeAcceptPolicy(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__changeAcceptPolicy(soap, _p); _p->conferenceID = conferenceID; _p->policy = policy; _p->timeForChairActoin = timeForChairActoin; } return _p; }

inline void soap_delete_ns__changeAcceptPolicy(struct soap *soap, struct ns__changeAcceptPolicy *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__changeAcceptPolicy(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__changeMaxFloorRequest
#define SOAP_TYPE_ns__changeMaxFloorRequest (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__changeMaxFloorRequest(struct soap*, struct ns__changeMaxFloorRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__changeMaxFloorRequest(struct soap*, const struct ns__changeMaxFloorRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__changeMaxFloorRequest(struct soap*, const char*, int, const struct ns__changeMaxFloorRequest *, const char*);
SOAP_FMAC3 struct ns__changeMaxFloorRequest * SOAP_FMAC4 soap_in_ns__changeMaxFloorRequest(struct soap*, const char*, struct ns__changeMaxFloorRequest *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__changeMaxFloorRequest(struct soap*, const struct ns__changeMaxFloorRequest *, const char*, const char*);

#ifndef soap_write_ns__changeMaxFloorRequest
#define soap_write_ns__changeMaxFloorRequest(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__changeMaxFloorRequest(soap, data),0) || soap_put_ns__changeMaxFloorRequest(soap, data, "ns:changeMaxFloorRequest", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__changeMaxFloorRequest * SOAP_FMAC4 soap_get_ns__changeMaxFloorRequest(struct soap*, struct ns__changeMaxFloorRequest *, const char*, const char*);

#ifndef soap_read_ns__changeMaxFloorRequest
#define soap_read_ns__changeMaxFloorRequest(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__changeMaxFloorRequest(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__changeMaxFloorRequest * SOAP_FMAC2 soap_instantiate_ns__changeMaxFloorRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__changeMaxFloorRequest * soap_new_ns__changeMaxFloorRequest(struct soap *soap, int n = -1) { return soap_instantiate_ns__changeMaxFloorRequest(soap, n, NULL, NULL, NULL); }

inline struct ns__changeMaxFloorRequest * soap_new_req_ns__changeMaxFloorRequest(struct soap *soap, unsigned int conferenceID, unsigned short maxFloorRequest) { struct ns__changeMaxFloorRequest *_p = soap_instantiate_ns__changeMaxFloorRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__changeMaxFloorRequest(soap, _p); _p->conferenceID = conferenceID; _p->maxFloorRequest = maxFloorRequest; } return _p; }

inline struct ns__changeMaxFloorRequest * soap_new_set_ns__changeMaxFloorRequest(struct soap *soap, unsigned int conferenceID, unsigned short maxFloorRequest) { struct ns__changeMaxFloorRequest *_p = soap_instantiate_ns__changeMaxFloorRequest(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__changeMaxFloorRequest(soap, _p); _p->conferenceID = conferenceID; _p->maxFloorRequest = maxFloorRequest; } return _p; }

inline void soap_delete_ns__changeMaxFloorRequest(struct soap *soap, struct ns__changeMaxFloorRequest *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__changeMaxFloorRequest(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__removeConference
#define SOAP_TYPE_ns__removeConference (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__removeConference(struct soap*, struct ns__removeConference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__removeConference(struct soap*, const struct ns__removeConference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__removeConference(struct soap*, const char*, int, const struct ns__removeConference *, const char*);
SOAP_FMAC3 struct ns__removeConference * SOAP_FMAC4 soap_in_ns__removeConference(struct soap*, const char*, struct ns__removeConference *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__removeConference(struct soap*, const struct ns__removeConference *, const char*, const char*);

#ifndef soap_write_ns__removeConference
#define soap_write_ns__removeConference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__removeConference(soap, data),0) || soap_put_ns__removeConference(soap, data, "ns:removeConference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__removeConference * SOAP_FMAC4 soap_get_ns__removeConference(struct soap*, struct ns__removeConference *, const char*, const char*);

#ifndef soap_read_ns__removeConference
#define soap_read_ns__removeConference(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__removeConference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__removeConference * SOAP_FMAC2 soap_instantiate_ns__removeConference(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__removeConference * soap_new_ns__removeConference(struct soap *soap, int n = -1) { return soap_instantiate_ns__removeConference(soap, n, NULL, NULL, NULL); }

inline struct ns__removeConference * soap_new_req_ns__removeConference(struct soap *soap, unsigned int conferenceID) { struct ns__removeConference *_p = soap_instantiate_ns__removeConference(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__removeConference(soap, _p); _p->conferenceID = conferenceID; } return _p; }

inline struct ns__removeConference * soap_new_set_ns__removeConference(struct soap *soap, unsigned int conferenceID) { struct ns__removeConference *_p = soap_instantiate_ns__removeConference(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__removeConference(soap, _p); _p->conferenceID = conferenceID; } return _p; }

inline void soap_delete_ns__removeConference(struct soap *soap, struct ns__removeConference *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__removeConference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__addConference
#define SOAP_TYPE_ns__addConference (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__addConference(struct soap*, struct ns__addConference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__addConference(struct soap*, const struct ns__addConference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__addConference(struct soap*, const char*, int, const struct ns__addConference *, const char*);
SOAP_FMAC3 struct ns__addConference * SOAP_FMAC4 soap_in_ns__addConference(struct soap*, const char*, struct ns__addConference *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__addConference(struct soap*, const struct ns__addConference *, const char*, const char*);

#ifndef soap_write_ns__addConference
#define soap_write_ns__addConference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__addConference(soap, data),0) || soap_put_ns__addConference(soap, data, "ns:addConference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__addConference * SOAP_FMAC4 soap_get_ns__addConference(struct soap*, struct ns__addConference *, const char*, const char*);

#ifndef soap_read_ns__addConference
#define soap_read_ns__addConference(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__addConference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__addConference * SOAP_FMAC2 soap_instantiate_ns__addConference(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__addConference * soap_new_ns__addConference(struct soap *soap, int n = -1) { return soap_instantiate_ns__addConference(soap, n, NULL, NULL, NULL); }

inline struct ns__addConference * soap_new_req_ns__addConference(struct soap *soap, unsigned int conferenceID, unsigned short maxFloorRequest, double timeForChairAction) { struct ns__addConference *_p = soap_instantiate_ns__addConference(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addConference(soap, _p); _p->conferenceID = conferenceID; _p->maxFloorRequest = maxFloorRequest; _p->timeForChairAction = timeForChairAction; } return _p; }

inline struct ns__addConference * soap_new_set_ns__addConference(struct soap *soap, unsigned int conferenceID, unsigned short maxFloorRequest, char *policy, double timeForChairAction) { struct ns__addConference *_p = soap_instantiate_ns__addConference(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__addConference(soap, _p); _p->conferenceID = conferenceID; _p->maxFloorRequest = maxFloorRequest; _p->policy = policy; _p->timeForChairAction = timeForChairAction; } return _p; }

inline void soap_delete_ns__addConference(struct soap *soap, struct ns__addConference *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__addConference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__stop
#define SOAP_TYPE_ns__stop (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__stop(struct soap*, struct ns__stop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__stop(struct soap*, const struct ns__stop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__stop(struct soap*, const char*, int, const struct ns__stop *, const char*);
SOAP_FMAC3 struct ns__stop * SOAP_FMAC4 soap_in_ns__stop(struct soap*, const char*, struct ns__stop *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__stop(struct soap*, const struct ns__stop *, const char*, const char*);

#ifndef soap_write_ns__stop
#define soap_write_ns__stop(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__stop(soap, data),0) || soap_put_ns__stop(soap, data, "ns:stop", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__stop * SOAP_FMAC4 soap_get_ns__stop(struct soap*, struct ns__stop *, const char*, const char*);

#ifndef soap_read_ns__stop
#define soap_read_ns__stop(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__stop(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__stop * SOAP_FMAC2 soap_instantiate_ns__stop(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__stop * soap_new_ns__stop(struct soap *soap, int n = -1) { return soap_instantiate_ns__stop(soap, n, NULL, NULL, NULL); }

inline struct ns__stop * soap_new_req_ns__stop(struct soap *soap) { struct ns__stop *_p = soap_instantiate_ns__stop(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__stop(soap, _p); } return _p; }

inline struct ns__stop * soap_new_set_ns__stop(struct soap *soap) { struct ns__stop *_p = soap_instantiate_ns__stop(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__stop(soap, _p); } return _p; }

inline void soap_delete_ns__stop(struct soap *soap, struct ns__stop *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__stop(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__start
#define SOAP_TYPE_ns__start (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__start(struct soap*, struct ns__start *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__start(struct soap*, const struct ns__start *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__start(struct soap*, const char*, int, const struct ns__start *, const char*);
SOAP_FMAC3 struct ns__start * SOAP_FMAC4 soap_in_ns__start(struct soap*, const char*, struct ns__start *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__start(struct soap*, const struct ns__start *, const char*, const char*);

#ifndef soap_write_ns__start
#define soap_write_ns__start(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__start(soap, data),0) || soap_put_ns__start(soap, data, "ns:start", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__start * SOAP_FMAC4 soap_get_ns__start(struct soap*, struct ns__start *, const char*, const char*);

#ifndef soap_read_ns__start
#define soap_read_ns__start(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__start(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__start * SOAP_FMAC2 soap_instantiate_ns__start(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__start * soap_new_ns__start(struct soap *soap, int n = -1) { return soap_instantiate_ns__start(soap, n, NULL, NULL, NULL); }

inline struct ns__start * soap_new_req_ns__start(struct soap *soap, unsigned short port, bool enbaleConnectionThread, int workThreadNum) { struct ns__start *_p = soap_instantiate_ns__start(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__start(soap, _p); _p->port = port; _p->enbaleConnectionThread = enbaleConnectionThread; _p->workThreadNum = workThreadNum; } return _p; }

inline struct ns__start * soap_new_set_ns__start(struct soap *soap, unsigned short port, bool enbaleConnectionThread, int workThreadNum) { struct ns__start *_p = soap_instantiate_ns__start(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__start(soap, _p); _p->port = port; _p->enbaleConnectionThread = enbaleConnectionThread; _p->workThreadNum = workThreadNum; } return _p; }

inline void soap_delete_ns__start(struct soap *soap, struct ns__start *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__start(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTons__ConferenceList
#define SOAP_TYPE_PointerTons__ConferenceList (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__ConferenceList(struct soap*, ns__ConferenceList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__ConferenceList(struct soap*, const char *, int, ns__ConferenceList *const*, const char *);
SOAP_FMAC3 ns__ConferenceList ** SOAP_FMAC4 soap_in_PointerTons__ConferenceList(struct soap*, const char*, ns__ConferenceList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__ConferenceList(struct soap*, ns__ConferenceList *const*, const char*, const char*);

#ifndef soap_write_PointerTons__ConferenceList
#define soap_write_PointerTons__ConferenceList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons__ConferenceList(soap, data),0) || soap_put_PointerTons__ConferenceList(soap, data, "ns:ConferenceList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__ConferenceList ** SOAP_FMAC4 soap_get_PointerTons__ConferenceList(struct soap*, ns__ConferenceList **, const char*, const char*);

#ifndef soap_read_PointerTons__ConferenceList
#define soap_read_PointerTons__ConferenceList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons__ConferenceList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfunsignedInt
#define SOAP_TYPE_std__vectorTemplateOfunsignedInt (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfunsignedInt(struct soap*, std::vector<unsigned int >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfunsignedInt(struct soap*, const std::vector<unsigned int >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfunsignedInt(struct soap*, const char*, int, const std::vector<unsigned int >*, const char*);
SOAP_FMAC3 std::vector<unsigned int >* SOAP_FMAC4 soap_in_std__vectorTemplateOfunsignedInt(struct soap*, const char*, std::vector<unsigned int >*, const char*);
SOAP_FMAC1 std::vector<unsigned int > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfunsignedInt(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<unsigned int > * soap_new_std__vectorTemplateOfunsignedInt(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfunsignedInt(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfunsignedInt(struct soap *soap, std::vector<unsigned int >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfunsignedInt(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
